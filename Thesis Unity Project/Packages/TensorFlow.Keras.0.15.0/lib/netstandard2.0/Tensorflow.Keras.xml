<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tensorflow.Keras</name>
    </assembly>
    <members>
        <member name="M:Tensorflow.Keras.Activations.RegisterActivation(Tensorflow.Keras.Activation)">
            <summary>
            Register the name-activation mapping in this static class.
            </summary>
            <param name="activation"></param>
        </member>
        <member name="F:Tensorflow.Keras.BackendImpl.PER_GRAPH_LAYER_NAME_UIDS">
            <summary>
            A global dictionary mapping graph objects to an index of counters used
            for various layer names in each graph.
            Allows to give unique autogenerated names to layers, in a graph-specific way.
            </summary>
        </member>
        <member name="M:Tensorflow.Keras.BackendImpl.spatial_2d_padding(Tensorflow.Tensor,Tensorflow.NumPy.NDArray,System.String)">
            <summary>
            Pads the 2nd and 3rd dimensions of a 4D tensor.
            </summary>
            <param name="x"></param>
            <param name="padding"></param>
            <param name="data_format"></param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.BackendImpl.eval_in_eager_or_function(Tensorflow.Tensors)">
            <summary>
            Method to evaluate a tensor in eager or in a tf.function.
            </summary>
            <param name="outputs"></param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.BackendImpl.categorical_crossentropy(Tensorflow.Tensor,Tensorflow.Tensor,System.Boolean,System.Int32)">
            <summary>
            Categorical crossentropy between an output tensor and a target tensor.
            </summary>
            <param name="target"></param>
            <param name="output"></param>
            <param name="from_logits"></param>
            <param name="axis"></param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.BackendImpl.resize_images(Tensorflow.Tensor,System.Int32,System.Int32,System.String,System.String)">
            <summary>
            Resizes the images contained in a 4D tensor.
            </summary>
            <param name="x"></param>
            <param name="height_factor"></param>
            <param name="width_factor"></param>
            <param name="data_format"></param>
            <param name="interpolation"></param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.BackendImpl.concatenate(Tensorflow.Tensors,System.Int32)">
            <summary>
            Concatenates a list of tensors alongside the specified axis.
            </summary>
            <param name="tensors">list of tensors to concatenate.</param>
            <param name="axis">concatenation axis.</param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.BackendImpl.repeat_elements(Tensorflow.Tensor,System.Int32,System.Int32)">
            <summary>
            Repeats the elements of a tensor along an axis, like `np.repeat`.
            </summary>
            <param name="x"></param>
            <param name="rep"></param>
            <param name="axis"></param>
            <returns></returns>
        </member>
        <member name="T:Tensorflow.Keras.Callbacks.EarlyStopping">
            <summary>
            Stop training when a monitored metric has stopped improving. 
            </summary>
        </member>
        <member name="M:Tensorflow.Keras.Datasets.Cifar10.load_data">
            <summary>
            Loads [CIFAR10 dataset](https://www.cs.toronto.edu/~kriz/cifar.html).
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tensorflow.Keras.Datasets.Imdb">
            <summary>
            This is a dataset of 25,000 movies reviews from IMDB, labeled by sentiment
            (positive/negative). Reviews have been preprocessed, and each review is
            encoded as a list of word indexes(integers).
            For convenience, words are indexed by overall frequency in the dataset,
            so that for instance the integer "3" encodes the 3rd most frequent word in
            the data.This allows for quick filtering operations such as:
            "only consider the top 10,000 most
            common words, but eliminate the top 20 most common words".
            As a convention, "0" does not stand for a specific word, but instead is used
            to encode the pad token.
            Args:
            path: where to cache the data (relative to %TEMP%/imdb/imdb.npz).
            num_words: integer or None.Words are
                ranked by how often they occur(in the training set) and only
                the `num_words` most frequent words are kept.Any less frequent word
                will appear as `oov_char` value in the sequence data.If None,
                all words are kept.Defaults to `None`.
            skip_top: skip the top N most frequently occurring words
                (which may not be informative). These words will appear as
                `oov_char` value in the dataset.When 0, no words are
                skipped. Defaults to `0`.
            maxlen: int or None.Maximum sequence length.
                Any longer sequence will be truncated. None, means no truncation.
                Defaults to `None`.
            seed: int. Seed for reproducible data shuffling.
            start_char: int. The start of a sequence will be marked with this
                character. 0 is usually the padding character. Defaults to `1`.
            oov_char: int. The out-of-vocabulary character.
                Words that were cut out because of the `num_words` or
                `skip_top` limits will be replaced with this character.
            index_from: int. Index actual words with this index and higher.
                Returns:
            Tuple of Numpy arrays: `(x_train, labels_train), (x_test, labels_test)`.
            
            ** x_train, x_test**: lists of sequences, which are lists of indexes
                (integers). If the num_words argument was specific, the maximum
                possible index value is `num_words - 1`. If the `maxlen` argument was
                specified, the largest possible sequence length is `maxlen`.
            
            ** labels_train, labels_test**: lists of integer labels(1 or 0).
            
            Raises:
            ValueError: in case `maxlen` is so low
                that no input sequence could be kept.
            Note that the 'out of vocabulary' character is only used for
            words that were present in the training set but are not included
            because they're not making the `num_words` cut here.
            Words that were not seen in the training set but are in the test set
            have simply been skipped.
            </summary>
            """Loads the [IMDB dataset](https://ai.stanford.edu/~amaas/data/sentiment/).
        </member>
        <member name="M:Tensorflow.Keras.Datasets.Imdb.load_data(System.String,System.Nullable{System.Int32},System.Int32,System.Nullable{System.Int32},System.Int32,System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32)">
            <summary>
            Loads the [IMDB dataset](https://ai.stanford.edu/~amaas/data/sentiment/).
            </summary>
            <param name="path"></param>
            <param name="num_words"></param>
            <param name="skip_top"></param>
            <param name="maxlen"></param>
            <param name="seed"></param>
            <param name="start_char"></param>
            <param name="oov_char"></param>
            <param name="index_from"></param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Datasets.Mnist.load_data">
            <summary>
            Loads the [MNIST dataset](http://yann.lecun.com/exdb/mnist/).
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tensorflow.Keras.Engine.DataAdapters.DataHandler">
            <summary>
            Handles iterating over epoch-level `tf.data.Iterator` objects.
            </summary>
        </member>
        <member name="T:Tensorflow.Keras.Engine.DataAdapters.IDataAdapter">
            <summary>
            In TF 2.0, tf.data is the preferred API for user to feed in data. In order
            to simplify the training code path, all the input data object will be
            converted to `tf.data.Dataset` if possible.
            </summary>
        </member>
        <member name="M:Tensorflow.Keras.Engine.DataAdapters.IDataAdapter.CanHandle(Tensorflow.Tensors,Tensorflow.Tensors)">
            <summary>
            Whether the current DataAdapter could handle the input x and y.
            </summary>
            <param name="x">input features</param>
            <param name="y">target labels</param>
            <returns></returns>
        </member>
        <member name="T:Tensorflow.Keras.Engine.DataAdapters.TensorLikeDataAdapter">
            <summary>
            Adapter that handles Tensor-like objects, e.g. EagerTensor and NumPy.
            </summary>
        </member>
        <member name="M:Tensorflow.Keras.Engine.DataAdapters.TensorLikeDataAdapter.slice_batch_indices(Tensorflow.Tensor)">
            <summary>
            Convert a Tensor of indices into a dataset of batched indices.
            </summary>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="T:Tensorflow.Keras.Engine.Functional">
            <summary>
            A `Functional` model is a `Model` defined as a directed graph of layers.
            </summary>
        </member>
        <member name="M:Tensorflow.Keras.Engine.Functional.connect_ancillary_layers(System.Collections.Generic.Dictionary{System.String,Tensorflow.Keras.ILayer})">
            <summary>
            Adds layers that are not connected to the outputs to the model.
            </summary>
            <param name="created_layers"></param>
        </member>
        <member name="P:Tensorflow.Keras.Engine.Functional.LayerCheckpointDependencies">
            <summary>
            Dictionary of layer dependencies to be included in the checkpoint.
            </summary>
        </member>
        <member name="M:Tensorflow.Keras.Engine.Functional._set_output_names">
            <summary>
            Assigns unique names to the Network's outputs.
            </summary>
        </member>
        <member name="M:Tensorflow.Keras.Engine.Functional.MapGraphNetwork(Tensorflow.Tensors,Tensorflow.Tensors)">
            <summary>
            Validates a network's topology and gather its layers and nodes.
            </summary>
            <param name="inputs"></param>
            <param name="outputs"></param>
        </member>
        <member name="M:Tensorflow.Keras.Engine.Functional.BuildMap(Tensorflow.Tensors)">
            <summary>
            This method topologically sorts nodes in order from inputs to outputs.
            </summary>
            <param name="outputs"></param>
        </member>
        <member name="M:Tensorflow.Keras.Engine.Functional.reconstruct_from_config(Tensorflow.Keras.Saving.FunctionalConfig,System.Collections.Generic.Dictionary{System.String,Tensorflow.Keras.ILayer})">
            <summary>
            Reconstructs graph from config object.
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Engine.Functional.get_network_config">
            <summary>
            Builds the config, which consists of the node graph and serialized layers.
            </summary>
        </member>
        <member name="T:Tensorflow.Keras.Engine.ICombiner">
            <summary>
            Functional object that defines a shardable computation.
            </summary>
        </member>
        <member name="T:Tensorflow.Keras.Engine.Layer">
            <summary>
            Base layer class.
            A layer is a class implementing common neural networks operations, such
            as convolution, batch norm, etc. These operations require managing weights,
            losses, updates, and inter-layer connectivity.
            </summary>
        </member>
        <member name="M:Tensorflow.Keras.Engine.Layer.Apply(Tensorflow.Tensors,Tensorflow.Tensors,System.Nullable{System.Boolean},Tensorflow.Common.Types.IOptionalArgs)">
            <summary>
            Wraps `call`, applying pre- and post-processing steps.
            </summary>
            <param name="inputs"></param>
            <param name="states"></param>
            <param name="training"></param>
            <returns></returns>
        </member>
        <member name="F:Tensorflow.Keras.Engine.Layer.args">
            <summary>
            Arguments initialize layer.
            </summary>
        </member>
        <member name="F:Tensorflow.Keras.Engine.Layer.built">
            <summary>
            Indicates whether `build` needs to be called upon layer call, to create
            the layer's weights.
            </summary>
        </member>
        <member name="F:Tensorflow.Keras.Engine.Layer.stateful">
            <summary>
            A stateful layer is a layer whose updates are run during inference too,
            for instance stateful RNNs.
            </summary>
        </member>
        <member name="F:Tensorflow.Keras.Engine.Layer.inputSpec">
            <summary>
            Provides information about which inputs are compatible with the layer.
            </summary>
        </member>
        <member name="P:Tensorflow.Keras.Engine.Layer.ReplacedCall">
            <summary>
            If this value is set, the behavior of layer call will be changed to directly calling this function.
            </summary>
        </member>
        <member name="M:Tensorflow.Keras.Engine.Layer.Call(Tensorflow.Tensors,Tensorflow.Tensors,System.Nullable{System.Boolean},Tensorflow.Common.Types.IOptionalArgs)">
            <summary>
            Subclass has to override this method.
            </summary>
            <param name="inputs"></param>
            <param name="state"></param>
            <param name="training"></param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Engine.Layer._handle_weight_regularization(System.String,Tensorflow.IVariableV1,Tensorflow.Keras.IRegularizer)">
            <summary>
            Create lambdas which compute regularization losses.
            </summary>
            <param name="name"></param>
            <param name="variable"></param>
            <param name="regularizer"></param>
        </member>
        <member name="M:Tensorflow.Keras.Engine.Layer.load_weights(System.String)">
            <summary>
            Loads all layer weights, either from a TensorFlow or an HDF5 weight file.
            </summary>
            <param name="filepath"></param>
        </member>
        <member name="M:Tensorflow.Keras.Engine.Layer._get_trainable_state">
            <summary>
            Get the `trainable` state of each sublayer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Engine.LossesContainer.Call(Tensorflow.Tensor,Tensorflow.Tensor,Tensorflow.Tensor)">
            <summary>
            Computes the overall loss.
            </summary>
            <param name="y_true"></param>
            <param name="y_pred"></param>
        </member>
        <member name="T:Tensorflow.Keras.Engine.Model">
            <summary>
            `Model` groups layers into an object with training and inference features.
            </summary>
        </member>
        <member name="M:Tensorflow.Keras.Engine.Model.evaluate(Tensorflow.NumPy.NDArray,Tensorflow.NumPy.NDArray,System.Int32,System.Int32,Tensorflow.NumPy.NDArray,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Returns the loss value and metrics values for the model in test mode.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="batch_size"></param>
            <param name="verbose"></param>
            <param name="steps"></param>
            <param name="max_queue_size"></param>
            <param name="workers"></param>
            <param name="use_multiprocessing"></param>
            <param name="return_dict"></param>
            <param name="is_val"></param>
        </member>
        <member name="M:Tensorflow.Keras.Engine.Model.evaluate(Tensorflow.Keras.Engine.DataAdapters.DataHandler,Tensorflow.Keras.Callbacks.CallbackList,System.Boolean,System.Func{Tensorflow.Keras.Engine.DataAdapters.DataHandler,Tensorflow.OwnedIterator,System.Collections.Generic.Dictionary{System.String,System.Single}})">
            <summary>
            Internal bare implementation of evaluate function.
            </summary>
            <param name="data_handler">Interations handling objects</param>
            <param name="callbacks"></param>
            <param name="test_func">The function to be called on each batch of data.</param>
            <param name="is_val">Whether it is validation or test.</param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Engine.Model.fit(Tensorflow.NumPy.NDArray,Tensorflow.NumPy.NDArray,System.Int32,System.Int32,System.Int32,System.Collections.Generic.List{Tensorflow.Keras.Engine.ICallback},System.Single,Tensorflow.Util.ValidationDataPack,System.Int32,System.Boolean,System.Collections.Generic.Dictionary{System.Int32,System.Single},Tensorflow.NumPy.NDArray,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Trains the model for a fixed number of epochs (iterations on a dataset).
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="batch_size"></param>
            <param name="epochs"></param>
            <param name="verbose"></param>
            <param name="callbacks"></param>
            <param name="validation_split"></param>
            <param name="validation_data"></param>
            <param name="shuffle"></param>
            <param name="class_weight"></param>
            <param name="sample_weight"></param>
            <param name="initial_epoch"></param>
            <param name="max_queue_size"></param>
            <param name="workers"></param>
            <param name="use_multiprocessing"></param>
            <returns></returns>
            <exception cref="T:Tensorflow.InvalidArgumentError"></exception>
        </member>
        <member name="M:Tensorflow.Keras.Engine.Model.predict(Tensorflow.Tensors,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Generates output predictions for the input samples.
            </summary>
            <param name="x">Input samples</param>
            <param name="batch_size">Number of samples per batch</param>
            <param name="verbose">Verbosity mode</param>
            <param name="steps">
            Total number of steps (batches of samples)
            before declaring the prediction round finished.
            </param>
            <param name="max_queue_size"></param>
            <param name="workers"></param>
            <param name="use_multiprocessing"></param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Engine.Model.save(System.String,System.Boolean,System.Boolean,System.String,Tensorflow.SaveOptions,Tensorflow.Functions.ConcreteFunction,System.Boolean)">
            <summary>
            Saves the model to Tensorflow SavedModel or a single HDF5 file.
            </summary>
            <param name="filepath"></param>
            <param name="overwrite"></param>
            <param name="include_optimizer"></param>
        </member>
        <member name="M:Tensorflow.Keras.Engine.Model.summary(System.Int32,System.Single[])">
            <summary>
            Prints a string summary of the network.
            </summary>
        </member>
        <member name="M:Tensorflow.Keras.Engine.Model.train_step(Tensorflow.Keras.Engine.DataAdapters.DataHandler,Tensorflow.Tensors,Tensorflow.Tensors)">
            <summary>
            The logic for one training step.
            </summary>
            <param name="data_handler"></param>
            <param name="x"></param>
            <param name="y"></param>
            <returns></returns>
        </member>
        <member name="T:Tensorflow.Keras.Engine.Node">
            <summary>
            A `Node` describes the connectivity between two layers.
            
            Each time a layer is connected to some new input,
            a node is added to `layer._inbound_nodes`.
            Each time the output of a layer is used by another layer,
            a node is added to `layer._outbound_nodes`.
            </summary>
        </member>
        <member name="M:Tensorflow.Keras.Engine.Node.MapArguments(System.Collections.Generic.Dictionary{System.Int64,System.Collections.Generic.Queue{Tensorflow.Tensor}})">
            <summary>
            Maps Keras Tensors to computed Tensors using `tensor_dict`.
            </summary>
            <param name="tensor_dict"></param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Engine.Node.serialize(System.Func{System.String,System.Int32,System.String},System.Collections.Generic.Dictionary{System.String,System.Int32})">
            <summary>
            Serializes `Node` for Functional API's `get_config`.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tensorflow.Keras.Engine.Sequential">
            <summary>
            `Sequential` groups a linear stack of layers into a `tf.keras.Model`.
            `Sequential` provides training and inference features on this model.
            </summary>
        </member>
        <member name="M:Tensorflow.Keras.Engine.Sequential.add(Tensorflow.Keras.ILayer)">
            <summary>
            Adds a layer instance on top of the layer stack.
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:Tensorflow.Keras.InitializersApi.HeNormal(System.Nullable{System.Int32})">
            <summary>
            He normal initializer.
            </summary>
            <param name="seed"></param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.KerasInterface.Model(Tensorflow.Tensors,Tensorflow.Tensors,System.String)">
            <summary>
            `Model` groups layers into an object with training and inference features.
            </summary>
            <param name="inputs"></param>
            <param name="outputs"></param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.KerasInterface.Input(Tensorflow.Shape,System.Int32,System.String,Tensorflow.TF_DataType,System.Boolean,Tensorflow.Tensor,System.Boolean,Tensorflow.Framework.Models.TypeSpec,Tensorflow.Shape,Tensorflow.Shape)">
            <summary>
            Instantiate a Keras tensor.
            </summary>
            <param name="shape"></param>
            <param name="batch_size"></param>
            <param name="dtype"></param>
            <param name="name"></param>
            <param name="sparse">
            A boolean specifying whether the placeholder to be created is sparse.
            </param>
            <param name="ragged">
            A boolean specifying whether the placeholder to be created is ragged.
            </param>
            <param name="tensor">
            Optional existing tensor to wrap into the `Input` layer.
            If set, the layer will not create a placeholder tensor.
            </param>
            <returns></returns>
        </member>
        <member name="T:Tensorflow.Keras.Layers.ELU">
            <summary>
            ELU Layer:
            x = 0 when x > 0, x = alpha( e^x-1 ) elsewhere
            </summary>
        </member>
        <member name="T:Tensorflow.Keras.Layers.LeakyReLu">
            <summary>
            Leaky version of a Rectified Linear Unit.
            </summary>
        </member>
        <member name="T:Tensorflow.Keras.Layers.ReLu6">
            <summary>
            Leaky version of a Rectified Linear Unit.
            </summary>
        </member>
        <member name="T:Tensorflow.Keras.Layers.SELU">
            <summary>
            SELU Layer:
            similar to ELU, but has pre-defined alpha and scale
            </summary>
        </member>
        <member name="T:Tensorflow.Keras.Layers.Attention">
            <summary>
            Dot-product attention layer, a.k.a. Luong-style attention.
            Inputs are `query` tensor of shape `[batch_size, Tq, dim]`, `value` tensor of
            shape `[batch_size, Tv, dim]` and `key` tensor of shape
            `[batch_size, Tv, dim]`. The calculation follows the steps:
            <para>
            1. Calculate scores with shape `[batch_size, Tq, Tv]` as a `query`-`key` dot
               product: `scores = tf.matmul(query, key, transpose_b=True)`.
            </para>
            <para>
            2. Use scores to calculate a distribution with shape
               `[batch_size, Tq, Tv]`: `distribution = tf.nn.softmax(scores)`.
            </para>
            <para>
            3. Use `distribution` to create a linear combination of `value` with
               shape `[batch_size, Tq, dim]`:
               `return tf.matmul(distribution, value)`.
            </para>
            </summary>
            <example> 0
            <code>
            //Variable-length int sequences.
            var query_input = keras.Input((1000), dtype: TF_DataType.TF_INT32);
            var value_input = keras.Input((1000), dtype: TF_DataType.TF_INT32);
            // Embedding lookup.
            var token_embedding = keras.layers.Embedding(input_dim: 1000, output_dim: 64);
            // Query embeddings of shape [batch_size, Tq, dimension].
            var query_embeddings = token_embedding.Apply(query_input);
            // Value embeddings of shape [batch_size, Tv, dimension].
            var value_embeddings = token_embedding.Apply(value_input);
            // CNN layer.
            var cnn_layer = keras.layers.Conv1D(
                filters: 100,
                kernel_size: 4,
                // Use 'same' padding so outputs have the same shape as inputs.
                padding: "same");
            var cnn_layer2 = keras.layers.Conv1D(
                filters: 100,
                kernel_size: 4,
                // Use 'same' padding so outputs have the same shape as inputs.
                padding: "same");
            // Query encoding of shape [batch_size, Tq, filters].
            var query_seq_encoding = cnn_layer.Apply(query_embeddings);
            // Value encoding of shape [batch_size, Tv, filters].
            var value_seq_encoding = cnn_layer.Apply(value_embeddings);
            // Query-value attention of shape [batch_size, Tq, filters].
            var query_value_attention_seq = keras.layers.Attention().Apply(
               (query_seq_encoding, value_seq_encoding));
            // Reduce over the sequence axis to produce encodings of shape
            // [batch_size, filters].
            var query_encoding = keras.layers.GlobalAveragePooling1D().Apply(
                query_seq_encoding);
            var query_value_attention = keras.layers.GlobalAveragePooling1D().Apply(
                query_value_attention_seq);
            // Concatenate query and document encodings to produce a DNN input layer.
            var input_layer = keras.layers.Concatenate().Apply(
                (query_encoding, query_value_attention));
            // Add DNN layers, and create Model.
            // ...
            </code>
            </example>
        </member>
        <member name="M:Tensorflow.Keras.Layers.Attention._calculate_scores(Tensorflow.Tensor,Tensorflow.Tensor)">
            <summary>
            Calculates attention scores as a query-key dot product.
            </summary>
            <param name="query">query: Query tensor of shape `[batch_size, Tq, dim]`.</param>
            <param name="key">key: Key tensor of shape `[batch_size, Tv, dim]`.</param>
            <returns>Tensor of shape `[batch_size, Tq, Tv]`.</returns>
        </member>
        <member name="T:Tensorflow.Keras.Layers.BaseDenseAttention">
            <summary>
            Base Attention class for Dense networks.
            This file follows the terminology of https://arxiv.org/abs/1706.03762 Figure 2.
            Attention is formed by three tensors: Query, Key and Value.
            This class is suitable for Dense or CNN networks, and not for RNN networks.
            Implementations of attention mechanisms should inherit from this class, and
            reuse the `apply_attention_scores()` method.
            </summary>
        </member>
        <member name="M:Tensorflow.Keras.Layers.BaseDenseAttention._calculate_scores(Tensorflow.Tensor,Tensorflow.Tensor)">
            <summary>
            Calculates attention scores.
            </summary>
            <param name="query">query: Query tensor of shape `[batch_size, Tq, dim]`.</param>
            <param name="key">key: Key tensor of shape `[batch_size, Tv, dim]`.</param>
            <returns>Tensor of shape `[batch_size, Tq, Tv]`.</returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.BaseDenseAttention._apply_scores(Tensorflow.Tensor,Tensorflow.Tensor,Tensorflow.Tensor,System.Nullable{System.Boolean})">
            <summary>
            Applies attention scores to the given value tensor.
            To use this method in your attention layer, follow the steps:
            <para>
                * Use `query` tensor of shape `[batch_size, Tq]` and `key` tensor of shape
                  `[batch_size, Tv]` to calculate the attention `scores`.
            </para>
            <para>
                * Pass `scores` and `value` tensors to this method. The method applies
                  `scores_mask`, calculates `attention_distribution = softmax(scores)`, then
                  returns `matmul(attention_distribution, value).
            </para>
            <para>
                * Apply `query_mask` and return the result.
            </para>
            </summary>
            <param name="scores">Scores float tensor of shape `[batch_size, Tq, Tv]`.</param>
            <param name="value">Value tensor of shape `[batch_size, Tv, dim]`.</param>
            <param name="scores_mask">
            A boolean mask `Tensor` of shape `[batch_size, 1, Tv]` or
            [batch_size, Tq, Tv]`. If given, scores at positions where
            `scores_mask==False` do not contribute to the result. It must contain
            at least one `True` value in each line along the last dimension.
            </param>
            <param name="training">
            Boolean indicating whether the layer should behave in
            training mode (adding dropout) or in inference mode (no dropout).
            </param>
            <returns>
            <para>
            Tensor of shape `[batch_size, Tq, dim]`.
            </para>
            <para>
            Attention scores after masking and softmax with shape
            [batch_size, Tq, Tv]`.
            </para>
            </returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.BaseDenseAttention._validate_call_args(Tensorflow.Tensors,Tensorflow.Tensors)">
            <summary>
            Validates arguments of the call method.
            </summary>
        </member>
        <member name="M:Tensorflow.Keras.Layers.MultiHeadAttention._build_attention_equation(System.Int32,Tensorflow.Shape)">
            <summary>
            Builds einsum equations for the attention computation.
            Query, key, value inputs after projection are expected to have the shape as:
            `(bs, [non-attention dims], [attention dims], num_heads, channels)`.
            `bs` and `[non-attention dims]` are treated as `[batch dims]`.
            
            <para>
            The attention operations can be generalized:
            </para>
            <para>
              (1) Query-key dot product:
              `([batch dims], [query attention dims], num_heads, channels), ([batch dims],
              [key attention dims], num_heads, channels) -> ([batch dim],
              num_heads, [query attention dims], [key attention dims])`
              </para><para>
              (2) Combination:
              `([batch dims], num_heads, [query attention dims], [key attention dims]),
              ([batch dims], [value attention dims], num_heads, channels) -> ([batch dims],
              [query attention dims], num_heads, channels)`
            </para>
            </summary>
            <param name="rank">Rank of query, key, value tensors.</param>
            <param name="attn_axes">List/tuple of axes, `[-1, rank)`,
                                   that attention will be applied to.</param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.MultiHeadAttention._build_proj_equation(System.Int32,System.Int32,System.Int32)">
            <summary>
            Builds an einsum equation for projections inside multi-head attention.
            </summary>
        </member>
        <member name="P:Tensorflow.Keras.Layers.DepthwiseConv2DArgs.DepthMultiplier">
            <summary>
            depth_multiplier: The number of depthwise convolution output channels for
            each input channel.The total number of depthwise convolution output
            channels will be equal to `filters_in* depth_multiplier`.
            </summary>
        </member>
        <member name="F:Tensorflow.Keras.Layers.DepthwiseConv2D.DepthMultiplier">
            <summary>
            depth_multiplier: The number of depthwise convolution output channels for
            each input channel.The total number of depthwise convolution output
            channels will be equal to `filters_in* depth_multiplier`.
            </summary>
        </member>
        <member name="T:Tensorflow.Keras.Layers.Dense">
            <summary>
            Just your regular densely-connected NN layer.
            </summary>
        </member>
        <member name="M:Tensorflow.Keras.Layers.EinsumDense._analyze_einsum_string(System.String,System.String,Tensorflow.Shape,Tensorflow.Shape)">
            <summary>
            Analyzes an einsum string to determine the required weight shape.
            </summary>
        </member>
        <member name="M:Tensorflow.Keras.Layers.EinsumDense._analyze_split_string(System.Text.RegularExpressions.Match,System.String,Tensorflow.Shape,Tensorflow.Shape,System.Boolean)">
            <summary>
            Analyze an pre-split einsum string to find the weight shape.
            </summary>
        </member>
        <member name="T:Tensorflow.Keras.Layers.Embedding">
            <summary>
            Turns positive integers (indexes) into dense vectors of fixed size.
            https://www.tensorflow.org/api_docs/python/tf/keras/layers/Embedding
            </summary>
        </member>
        <member name="T:Tensorflow.Keras.Layers.InputLayer">
            <summary>
            Layer to be used as an entry point into a Network (a graph of layers).
            </summary>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.Cropping1D(Tensorflow.NumPy.NDArray)">
            <summary>
            Cropping layer for 1D input
            </summary>
            <param name="cropping">cropping size</param>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.Cropping2D(Tensorflow.NumPy.NDArray,Tensorflow.Keras.ArgsDefinition.Reshaping.Cropping2DArgs.DataFormat)">
            <summary>
            Cropping layer for 2D input <br/>
            </summary>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.Cropping3D(Tensorflow.NumPy.NDArray,Tensorflow.Keras.ArgsDefinition.Reshaping.Cropping3DArgs.DataFormat)">
            <summary>
            Cropping layer for 3D input <br/>
            </summary>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.BatchNormalization(System.Int32,System.Single,System.Single,System.Boolean,System.Boolean,Tensorflow.IInitializer,Tensorflow.IInitializer,Tensorflow.IInitializer,Tensorflow.IInitializer,System.Boolean,System.String,System.Boolean,System.Single)">
            <summary>
            Layer that normalizes its inputs.
            Batch normalization applies a transformation that maintains the mean output close to 0 and the output standard deviation close to 1.
            Importantly, batch normalization works differently during training and during inference.
            
            http://arxiv.org/abs/1502.03167
            </summary>
            <param name="axis">The axis that should be normalized (typically the features axis). 
            For instance, after a Conv2D layer with data_format="channels_first", set axis=1 in BatchNormalization.
            </param>
            <param name="momentum">Momentum for the moving average.</param>
            <param name="epsilon">Small float added to variance to avoid dividing by zero.</param>
            <param name="center">If True, add offset of beta to normalized tensor. If False, beta is ignored.</param>
            <param name="scale">If True, multiply by gamma. If False, gamma is not used. When the next layer is linear (also e.g. nn.relu), this can be disabled since the scaling will be done by the next layer.</param>
            <param name="beta_initializer">Initializer for the beta weight.</param>
            <param name="gamma_initializer">Initializer for the gamma weight.</param>
            <param name="moving_mean_initializer">Initializer for the moving mean.</param>
            <param name="moving_variance_initializer">Initializer for the moving variance.</param>
            <param name="trainable">Boolean, if True the variables will be marked as trainable.</param>
            <param name="name">Layer name.</param>
            <param name="renorm">Whether to use Batch Renormalization. This adds extra variables during training. The inference is the same for either value of this parameter.</param>
            <param name="renorm_momentum">Momentum used to update the moving means and standard deviations with renorm. 
            Unlike momentum, this affects training and should be neither too small (which would add noise) nor too large (which would give stale estimates). 
            Note that momentum is still applied to get the means and variances for inference.
            </param>
            <returns>Tensor of the same shape as input.</returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.Conv1D(System.Int32,Tensorflow.Shape,System.Int32,System.String,System.String,System.Int32,System.Int32,System.String,System.Boolean,System.String,System.String)">
            <summary>
            1D convolution layer (e.g. temporal convolution).
            This layer creates a convolution kernel that is convolved with the layer input over a single spatial(or temporal) dimension to produce a tensor of outputs.If use_bias is True, a bias vector is created and added to the outputs.Finally, if activation is not None, it is applied to the outputs as well.
            </summary>
            <param name="filters">Integer, the dimensionality of the output space (i.e. the number of output filters in the convolution)</param>
            <param name="kernel_size">An integer specifying the width of the 1D convolution window.</param>
            <param name="strides">An integer specifying the stride of the convolution window . Specifying any stride value != 1 is incompatible with specifying any dilation_rate value != 1.</param>
            <param name="padding">one of "valid" or "same" (case-insensitive). "valid" means no padding. "same" results in padding evenly to the left/right or up/down of the input such that output has the same height/width dimension as the input.</param>
            <param name="data_format">A string, one of channels_last (default) or channels_first. The ordering of the dimensions in the inputs. channels_last corresponds to inputs with shape (batch_size, height, width, channels) while channels_first corresponds to inputs with shape (batch_size, channels, height, width). It defaults to the image_data_format value found in your Keras config file at ~/.keras/keras.json. If you never set it, then it will be channels_last.</param>
            <param name="dilation_rate">An integer specifying the dilation rate to use for dilated convolution.Currently, specifying any dilation_rate value != 1 is incompatible with specifying any stride value != 1.</param>
            <param name="groups">A positive integer specifying the number of groups in which the input is split along the channel axis. Each group is convolved separately with filters / groups filters. The output is the concatenation of all the groups results along the channel axis. Input channels and filters must both be divisible by groups.</param>
            <param name="activation">Activation function to use. If you don't specify anything, no activation is applied (see keras.activations).</param>
            <param name="use_bias">Boolean, whether the layer uses a bias vector.</param>
            <param name="kernel_initializer">Initializer for the kernel weights matrix (see keras.initializers).</param>
            <param name="bias_initializer">Initializer for the bias vector (see keras.initializers).</param>
            <returns>A tensor of rank 3 representing activation(conv1d(inputs, kernel) + bias).</returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.Conv2D(System.Int32,Tensorflow.Shape,Tensorflow.Shape,System.String,System.String,Tensorflow.Shape,System.Int32,Tensorflow.Keras.Activation,System.Boolean,Tensorflow.IInitializer,Tensorflow.IInitializer,Tensorflow.Keras.IRegularizer,Tensorflow.Keras.IRegularizer,Tensorflow.Keras.IRegularizer)">
            <summary>
            2D convolution layer (e.g. spatial convolution over images).
            This layer creates a convolution kernel that is convolved with the layer input to produce a tensor of outputs.
            If use_bias is True, a bias vector is created and added to the outputs.Finally, if activation is not None, it is applied to the outputs as well.
            </summary>
            <param name="filters">Integer, the dimensionality of the output space (i.e. the number of output filters in the convolution)</param>
            <param name="kernel_size">An integer or tuple/list of 2 integers, specifying the height and width of the 2D convolution window. Can be a single integer to specify the same value for all spatial dimensions.</param>
            <param name="strides">An integer or tuple/list of 2 integers, specifying the strides of the convolution along the height and width. Can be a single integer to specify the same value for all spatial dimensions. Specifying any stride value != 1 is incompatible with specifying any dilation_rate value != 1.</param>
            <param name="padding">one of "valid" or "same" (case-insensitive). "valid" means no padding. "same" results in padding evenly to the left/right or up/down of the input such that output has the same height/width dimension as the input.</param>
            <param name="data_format">A string, one of channels_last (default) or channels_first. The ordering of the dimensions in the inputs. channels_last corresponds to inputs with shape (batch_size, height, width, channels) while channels_first corresponds to inputs with shape (batch_size, channels, height, width). It defaults to the image_data_format value found in your Keras config file at ~/.keras/keras.json. If you never set it, then it will be channels_last.</param>
            <param name="dilation_rate">an integer or tuple/list of 2 integers, specifying the dilation rate to use for dilated convolution. Can be a single integer to specify the same value for all spatial dimensions. Currently, specifying any dilation_rate value != 1 is incompatible with specifying any stride value != 1.</param>
            <param name="groups">A positive integer specifying the number of groups in which the input is split along the channel axis. Each group is convolved separately with filters / groups filters. The output is the concatenation of all the groups results along the channel axis. Input channels and filters must both be divisible by groups.</param>
            <param name="activation">Activation function to use. If you don't specify anything, no activation is applied (see keras.activations).</param>
            <param name="use_bias">Boolean, whether the layer uses a bias vector.</param>
            <param name="kernel_initializer">Initializer for the kernel weights matrix (see keras.initializers).</param>
            <param name="bias_initializer">Initializer for the bias vector (see keras.initializers).</param>
            <param name="kernel_regularizer">Regularizer function applied to the kernel weights matrix (see keras.regularizers).</param>
            <param name="bias_regularizer">Regularizer function applied to the bias vector (see keras.regularizers).</param>
            <param name="activity_regularizer">Regularizer function applied to the output of the layer (its "activation") (see keras.regularizers).</param>
            <returns>A tensor of rank 4+ representing activation(conv2d(inputs, kernel) + bias).</returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.Conv2D(System.Int32,Tensorflow.Shape,Tensorflow.Shape,System.String,System.String,Tensorflow.Shape,System.Int32,System.String,System.Boolean,System.String,System.String)">
            <summary>
            2D convolution layer (e.g. spatial convolution over images).
            This layer creates a convolution kernel that is convolved with the layer input to produce a tensor of outputs.
            If use_bias is True, a bias vector is created and added to the outputs.Finally, if activation is not None, it is applied to the outputs as well.
            </summary>
            <param name="filters">Integer, the dimensionality of the output space (i.e. the number of output filters in the convolution)</param>
            <param name="kernel_size">An integer or tuple/list of 2 integers, specifying the height and width of the 2D convolution window. Can be a single integer to specify the same value for all spatial dimensions.</param>
            <param name="strides">An integer or tuple/list of 2 integers, specifying the strides of the convolution along the height and width. Can be a single integer to specify the same value for all spatial dimensions. Specifying any stride value != 1 is incompatible with specifying any dilation_rate value != 1.</param>
            <param name="padding">one of "valid" or "same" (case-insensitive). "valid" means no padding. "same" results in padding evenly to the left/right or up/down of the input such that output has the same height/width dimension as the input.</param>
            <param name="data_format">A string, one of channels_last (default) or channels_first. The ordering of the dimensions in the inputs. channels_last corresponds to inputs with shape (batch_size, height, width, channels) while channels_first corresponds to inputs with shape (batch_size, channels, height, width). It defaults to the image_data_format value found in your Keras config file at ~/.keras/keras.json. If you never set it, then it will be channels_last.</param>
            <param name="dilation_rate">an integer or tuple/list of 2 integers, specifying the dilation rate to use for dilated convolution. Can be a single integer to specify the same value for all spatial dimensions. Currently, specifying any dilation_rate value != 1 is incompatible with specifying any stride value != 1.</param>
            <param name="groups">A positive integer specifying the number of groups in which the input is split along the channel axis. Each group is convolved separately with filters / groups filters. The output is the concatenation of all the groups results along the channel axis. Input channels and filters must both be divisible by groups.</param>
            <param name="activation">Activation function to use. If you don't specify anything, no activation is applied (see keras.activations).</param>
            <param name="use_bias">Boolean, whether the layer uses a bias vector.</param>
            <param name="kernel_initializer">The name of the initializer for the kernel weights matrix (see keras.initializers).</param>
            <param name="bias_initializer">The name of the initializer for the bias vector (see keras.initializers).</param>
            <returns>A tensor of rank 4+ representing activation(conv2d(inputs, kernel) + bias).</returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.Conv2DTranspose(System.Int32,Tensorflow.Shape,Tensorflow.Shape,System.String,System.String,Tensorflow.Shape,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Transposed convolution layer (sometimes called Deconvolution).
            </summary>
            <param name="filters">Integer, the dimensionality of the output space (i.e. the number of output filters in the convolution)</param>
            <param name="kernel_size">An integer or tuple/list of 2 integers, specifying the height and width of the 2D convolution window. Can be a single integer to specify the same value for all spatial dimensions.</param>
            <param name="strides">An integer or tuple/list of 2 integers, specifying the strides of the convolution along the height and width. Can be a single integer to specify the same value for all spatial dimensions. Specifying any stride value != 1 is incompatible with specifying any dilation_rate value != 1.</param>
            <param name="output_padding">one of "valid" or "same" (case-insensitive). "valid" means no padding. "same" results in padding evenly to the left/right or up/down of the input such that output has the same height/width dimension as the input.</param>
            <param name="data_format">A string, one of channels_last (default) or channels_first. The ordering of the dimensions in the inputs. channels_last corresponds to inputs with shape (batch_size, height, width, channels) while channels_first corresponds to inputs with shape (batch_size, channels, height, width). It defaults to the image_data_format value found in your Keras config file at ~/.keras/keras.json. If you never set it, then it will be channels_last.</param>
            <param name="dilation_rate">an integer or tuple/list of 2 integers, specifying the dilation rate to use for dilated convolution. Can be a single integer to specify the same value for all spatial dimensions. Currently, specifying any dilation_rate value != 1 is incompatible with specifying any stride value != 1.</param>
            <param name="activation">Activation function to use. If you don't specify anything, no activation is applied (see keras.activations).</param>
            <param name="use_bias">Boolean, whether the layer uses a bias vector.</param>
            <param name="kernel_initializer">The name of the initializer for the kernel weights matrix (see keras.initializers).</param>
            <param name="bias_initializer">The name of the initializer for the bias vector (see keras.initializers).</param>
            <param name="kernel_regularizer">The name of the regularizer function applied to the kernel weights matrix (see keras.regularizers).</param>
            <param name="bias_regularizer">The name of the regularizer function applied to the bias vector (see keras.regularizers).</param>
            <param name="activity_regularizer">The name of the regularizer function applied to the output of the layer (its "activation") (see keras.regularizers).</param>
            <returns>A tensor of rank 4+ representing activation(conv2d(inputs, kernel) + bias).</returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.Dense(System.Int32,Tensorflow.Keras.Activation,Tensorflow.IInitializer,System.Boolean,Tensorflow.IInitializer,Tensorflow.Shape)">
            <summary>
            Just your regular densely-connected NN layer.
            
            Dense implements the operation: output = activation(dot(input, kernel) + bias) where activation is the 
            element-wise activation function passed as the activation argument, kernel is a weights matrix created by the layer, 
            and bias is a bias vector created by the layer (only applicable if use_bias is True).
            </summary>
            <param name="units">Positive integer, dimensionality of the output space.</param>
            <param name="activation">Activation function to use. If you don't specify anything, no activation is applied (ie. "linear" activation: a(x) = x).</param>
            <param name="kernel_initializer">Initializer for the kernel weights matrix.</param>
            <param name="use_bias">Boolean, whether the layer uses a bias vector.</param>
            <param name="bias_initializer">Initializer for the bias vector.</param>
            <param name="input_shape">N-D tensor with shape: (batch_size, ..., input_dim). The most common situation would be a 2D input with shape (batch_size, input_dim).</param>
            <returns>N-D tensor with shape: (batch_size, ..., units). For instance, for a 2D input with shape (batch_size, input_dim), the output would have shape (batch_size, units).</returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.Dense(System.Int32)">
            <summary>
            Just your regular densely-connected NN layer.
            
            Dense implements the operation: output = activation(dot(input, kernel) + bias) where activation is the 
            element-wise activation function passed as the activation argument, kernel is a weights matrix created by the layer, 
            and bias is a bias vector created by the layer (only applicable if use_bias is True).
            </summary>
            <param name="units">Positive integer, dimensionality of the output space.</param>
            <returns>N-D tensor with shape: (batch_size, ..., units). For instance, for a 2D input with shape (batch_size, input_dim), the output would have shape (batch_size, units).</returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.Dense(System.Int32,System.String,Tensorflow.Shape)">
            <summary>
            Just your regular densely-connected NN layer.
            
            Dense implements the operation: output = activation(dot(input, kernel) + bias) where activation is the 
            element-wise activation function passed as the activation argument, kernel is a weights matrix created by the layer, 
            and bias is a bias vector created by the layer (only applicable if use_bias is True).
            </summary>
            <param name="units">Positive integer, dimensionality of the output space.</param>
            <param name="activation">Activation function to use. If you don't specify anything, no activation is applied (ie. "linear" activation: a(x) = x).</param>
            <param name="input_shape">N-D tensor with shape: (batch_size, ..., input_dim). The most common situation would be a 2D input with shape (batch_size, input_dim).</param>
            <returns>N-D tensor with shape: (batch_size, ..., units). For instance, for a 2D input with shape (batch_size, input_dim), the output would have shape (batch_size, units).</returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.dense(Tensorflow.Tensor,System.Int32,Tensorflow.Keras.Activation,System.Boolean,Tensorflow.IInitializer,Tensorflow.IInitializer,System.Boolean,System.String,System.Nullable{System.Boolean})">
            <summary>
                Densely-connected layer class. aka fully-connected<br></br>
                `outputs = activation(inputs * kernel + bias)`
            </summary>
            <param name="inputs"></param>
            <param name="units">Python integer, dimensionality of the output space.</param>
            <param name="activation"></param>
            <param name="use_bias">Boolean, whether the layer uses a bias.</param>
            <param name="kernel_initializer"></param>
            <param name="bias_initializer"></param>
            <param name="trainable"></param>
            <param name="name"></param>
            <param name="reuse"></param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.Dropout(System.Single,Tensorflow.Shape,System.Nullable{System.Int32})">
            <summary>
            Applies Dropout to the input.
            The Dropout layer randomly sets input units to 0 with a frequency of rate at each step during training time, 
            which helps prevent overfitting.Inputs not set to 0 are scaled up by 1/(1 - rate) such that the sum over all inputs is unchanged.
            </summary>
            <param name="rate">Float between 0 and 1. Fraction of the input units to drop.</param>
            <param name="noise_shape">1D integer tensor representing the shape of the binary dropout mask that will be multiplied with the input. For instance, 
            if your inputs have shape (batch_size, timesteps, features) and you want the dropout mask to be the same for all timesteps, 
            you can use noise_shape=(batch_size, 1, features).
            </param>
            <param name="seed">An integer to use as random seed.</param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.Embedding(System.Int32,System.Int32,Tensorflow.IInitializer,System.Boolean,Tensorflow.Shape,System.Int32)">
            <summary>
            Turns positive integers (indexes) into dense vectors of fixed size.
            This layer can only be used as the first layer in a model.
            e.g. [[4], [20]] -> [[0.25, 0.1], [0.6, -0.2]]
            https://www.tensorflow.org/api_docs/python/tf/keras/layers/Embedding
            </summary>
            <param name="input_dim">Size of the vocabulary, i.e. maximum integer index + 1.</param>
            <param name="output_dim">Dimension of the dense embedding.</param>
            <param name="embeddings_initializer">Initializer for the embeddings matrix (see keras.initializers).</param>
            <param name="mask_zero"></param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.Flatten(System.String)">
            <summary>
            Flattens the input. Does not affect the batch size.
            </summary>
            <param name="data_format">A string, one of channels_last (default) or channels_first. The ordering of the dimensions in the inputs. 
            channels_last corresponds to inputs with shape (batch, ..., channels) while channels_first corresponds to inputs with shape (batch, channels, ...). 
            It defaults to the image_data_format value found in your Keras config file at ~/.keras/keras.json. 
            If you never set it, then it will be "channels_last".
            </param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.Input(Tensorflow.Shape,System.Int32,System.String,Tensorflow.TF_DataType,System.Boolean,Tensorflow.Tensor,System.Boolean,Tensorflow.Framework.Models.TypeSpec,Tensorflow.Shape,Tensorflow.Shape)">
            <summary>
            `Input()` is used to instantiate a Keras tensor.
             Keras tensor is a TensorFlow symbolic tensor object, which we augment with certain attributes that allow us 
             to build a Keras model just by knowing the inputs and outputs of the model.
            </summary>
            <param name="shape">A shape tuple not including the batch size.</param>
            <param name="name">An optional name string for the layer. Should be unique in a model (do not reuse the same name twice). It will be autogenerated if it isn't provided.</param>
            <param name="sparse">A boolean specifying whether the placeholder to be created is sparse. Only one of 'ragged' and 'sparse' can be True. 
            Note that, if sparse is False, sparse tensors can still be passed into the input - they will be densified with a default value of 0.
            </param>
            <param name="ragged">A boolean specifying whether the placeholder to be created is ragged. Only one of 'ragged' and 'sparse' can be True. 
            In this case, values of 'None' in the 'shape' argument represent ragged dimensions. For more information about RaggedTensors, see this guide.
            </param>
            <returns>A tensor.</returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.AveragePooling2D(Tensorflow.Shape,Tensorflow.Shape,System.String,System.String)">
            <summary>
            Average pooling operation for spatial data.
            </summary>
            <param name="pool_size"></param>
            <param name="strides"></param>
            <param name="padding"></param>
            <param name="data_format"></param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.MaxPooling1D(System.Nullable{System.Int32},System.Nullable{System.Int32},System.String,System.String)">
            <summary>
            Max pooling operation for 1D temporal data.
            </summary>
            <param name="pool_size">Integer, size of the max pooling window.</param>
            <param name="strides">Integer, or null. Specifies how much the pooling window moves for each pooling step. If null, it will default to pool_size.</param>
            <param name="padding">One of "valid" or "same" (case-insensitive). "valid" means no padding. 
            "same" results in padding evenly to the left/right or up/down of the input such that output has the same height/width dimension as the input.
            </param>
            <param name="data_format">
            A string, one of channels_last (default) or channels_first. The ordering of the dimensions in the inputs. 
            channels_last corresponds to inputs with shape (batch, steps, features) while channels_first corresponds to inputs with shape (batch, features, steps).
            </param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.MaxPooling2D(Tensorflow.Shape,Tensorflow.Shape,System.String,System.String)">
            <summary>
            Max pooling operation for 2D spatial data.
            Downsamples the input representation by taking the maximum value over the window defined by pool_size for each dimension along the features axis.
            The window is shifted by strides in each dimension. The resulting output when using "valid" padding option has a shape(number of rows or columns) 
            of: output_shape = (input_shape - pool_size + 1) / strides)
            The resulting output shape when using the "same" padding option is: output_shape = input_shape / strides
            </summary>
            <param name="pool_size">
            Integer or tuple of 2 integers, window size over which to take the maximum. 
            (2, 2) will take the max value over a 2x2 pooling window. If only one integer is specified, the same window length will be used for both dimensions.
            </param>
            <param name="strides">
            Integer, tuple of 2 integers, or null. Strides values. Specifies how far the pooling window moves for each pooling step. 
            If null, it will default to pool_size.
            </param>
            <param name="padding">One of "valid" or "same" (case-insensitive). "valid" means no padding. 
            "same" results in padding evenly to the left/right or up/down of the input such that output has the same height/width dimension as the input.
            </param>
            <param name="data_format">
            A string, one of channels_last (default) or channels_first. The ordering of the dimensions in the inputs. 
            channels_last corresponds to inputs with shape (batch, height, width, channels) while channels_first corresponds to 
            inputs with shape (batch, channels, height, width). 
            It defaults to the image_data_format value found in your Keras config file at ~/.keras/keras.json. 
            If you never set it, then it will be "channels_last"</param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.max_pooling2d(Tensorflow.Tensor,System.Int32[],System.Int32[],System.String,System.String,System.String)">
            <summary>
            Max pooling layer for 2D inputs (e.g. images).
            </summary>
            <param name="inputs">The tensor over which to pool. Must have rank 4.</param>
            <param name="pool_size">
            Integer or tuple of 2 integers, window size over which to take the maximum. 
            (2, 2) will take the max value over a 2x2 pooling window. If only one integer is specified, the same window length will be used for both dimensions.
            </param>
            <param name="strides">
            Integer, tuple of 2 integers, or null. Strides values. Specifies how far the pooling window moves for each pooling step. 
            If null, it will default to pool_size.
            </param>
            <param name="padding">One of "valid" or "same" (case-insensitive). "valid" means no padding. 
            "same" results in padding evenly to the left/right or up/down of the input such that output has the same height/width dimension as the input.
            </param>
            <param name="data_format">
            A string, one of channels_last (default) or channels_first. The ordering of the dimensions in the inputs. 
            channels_last corresponds to inputs with shape (batch, height, width, channels) while channels_first corresponds to 
            inputs with shape (batch, channels, height, width). 
            It defaults to the image_data_format value found in your Keras config file at ~/.keras/keras.json. 
            If you never set it, then it will be "channels_last"</param>        
            <param name="name">A name for the layer</param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.LeakyReLU(System.Single)">
            <summary>
            Leaky version of a Rectified Linear Unit.
            </summary>
            <param name="alpha">Negative slope coefficient.</param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.ReLU6">
            <summary>
            Leaky version of a Rectified Linear Unit.
            </summary>
            <param name="alpha">Negative slope coefficient.</param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.SimpleRNN(System.Int32,System.String,System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="units">Positive integer, dimensionality of the output space.</param>
            <param name="activation">The name of the activation function to use. Default: hyperbolic tangent (tanh)..</param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.RNN(Tensorflow.Keras.Layers.IRnnCell,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="cell"></param>
            <param name="return_sequences"></param>
            <param name="return_state"></param>
            <param name="go_backwards"></param>
            <param name="stateful"></param>
            <param name="unroll"></param>
            <param name="time_major"></param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.LSTM(System.Int32,Tensorflow.Keras.Activation,Tensorflow.Keras.Activation,System.Boolean,Tensorflow.IInitializer,Tensorflow.IInitializer,Tensorflow.IInitializer,System.Boolean,System.Single,System.Single,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Long Short-Term Memory layer - Hochreiter 1997.
            </summary>
            <param name="units">Positive integer, dimensionality of the output space.</param>
            <param name="activation">Activation function to use. If you pass null, no activation is applied (ie. "linear" activation: a(x) = x).</param>
            <param name="recurrent_activation">Activation function to use for the recurrent step. If you pass null, no activation is applied (ie. "linear" activation: a(x) = x).</param>
            <param name="use_bias">Boolean (default True), whether the layer uses a bias vector.</param>
            <param name="kernel_initializer">Initializer for the kernel weights matrix, used for the linear transformation of the inputs. Default: glorot_uniform.</param>
            <param name="recurrent_initializer">Initializer for the recurrent_kernel weights matrix, used for the linear transformation of the recurrent state. Default: orthogonal.</param>
            <param name="bias_initializer">Initializer for the bias vector. Default: zeros.</param>
            <param name="unit_forget_bias">Boolean (default True). If True, add 1 to the bias of the forget gate at initialization. Setting it to true will also force bias_initializer="zeros". This is recommended in Jozefowicz et al..</param>
            <param name="dropout">Float between 0 and 1. Fraction of the units to drop for the linear transformation of the inputs. Default: 0.</param>
            <param name="recurrent_dropout">Float between 0 and 1. Fraction of the units to drop for the linear transformation of the recurrent state. Default: 0.</param>
            <param name="implementation"></param>
            <param name="return_sequences">Boolean. Whether to return the last output. in the output sequence, or the full sequence. Default: False.</param>
            <param name="return_state">Whether to return the last state in addition to the output. Default: False.</param>
            <param name="go_backwards">Boolean (default false). If True, process the input sequence backwards and return the reversed sequence.</param>
            <param name="stateful">Boolean (default False). If True, the last state for each sample at index i in a batch will be used as initial state for the sample of index i in the following batch.</param>
            <param name="time_major">
            The shape format of the inputs and outputs tensors. If True, the inputs and outputs will be in shape [timesteps, batch, feature], 
            whereas in the False case, it will be [batch, timesteps, feature]. Using time_major = True is a bit more efficient because it avoids transposes at the 
            beginning and end of the RNN calculation. However, most TensorFlow data is batch-major, so by default this function accepts input and emits output in batch-major form.</param>
            <param name="unroll">
            Boolean (default False). If True, the network will be unrolled, else a symbolic loop will be used. Unrolling can speed-up a RNN, 
            although it tends to be more memory-intensive. Unrolling is only suitable for short sequences.
            </param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.GRUCell(System.Int32,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.Single,System.Single,System.Boolean)">
            <summary>
            Cell class for the GRU layer.
            </summary>
            <param name="units"></param>
            <param name="activation"></param>
            <param name="recurrent_activation"></param>
            <param name="use_bias"></param>
            <param name="kernel_initializer"></param>
            <param name="recurrent_initializer"></param>
            <param name="bias_initializer"></param>
            <param name="dropout"></param>
            <param name="recurrent_dropout"></param>
            <param name="reset_after"></param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.GRU(System.Int32,System.String,System.String,System.Boolean,System.String,System.String,System.String,System.Single,System.Single,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gated Recurrent Unit - Cho et al. 2014.
            </summary>
            <param name="units">Positive integer, dimensionality of the output space.</param>
            <param name="activation">Activation function to use. If you pass `None`, no activation is applied.(ie. "linear" activation: `a(x) = x`).</param>
            <param name="recurrent_activation">Activation function to use for the recurrent step. If you pass `None`, no activation is applied. (ie. "linear" activation: `a(x) = x`).</param>
            <param name="use_bias">Boolean, (default `True`), whether the layer uses a bias vector.</param>
            <param name="kernel_initializer">Initializer for the `kernel` weights matrix, used for the linear transformation of the inputs. Default: `glorot_uniform`.</param>
            <param name="recurrent_initializer">Initializer for the `recurrent_kernel` weights matrix, used for the linear transformation of the recurrent state. Default: `orthogonal`.</param>
            <param name="bias_initializer">Initializer for the bias vector. Default: `zeros`.</param>
            <param name="dropout">Float between 0 and 1. Fraction of the units to drop for the linear transformation of the inputs. Default: 0.</param>
            <param name="recurrent_dropout">Float between 0 and 1. Fraction of the units to drop for the linear transformation of the recurrent state. Default: 0.</param>
            <param name="implementation"></param>
            <param name="return_sequences">Boolean. Whether to return the last output in the output sequence, or the full sequence. Default: `False`.</param>
            <param name="return_state">Boolean. Whether to return the last state in addition to the output. Default: `False`.</param>
            <param name="go_backwards">Boolean (default `False`). If True, process the input sequence backwards and return the reversed sequence.</param>
            <param name="stateful">Boolean (default False). If True, the last state for each sample at index i in a batch will be used as initial state for the sample of index i in the following batch.</param>
            <param name="unroll">Boolean (default False). If True, the network will be unrolled, else a symbolic loop will be used. Unrolling can speed-up a RNN,</param>
            <param name="time_major">The shape format of the `inputs` and `outputs` tensors.</param>
            <param name="reset_after">GRU convention (whether to apply reset gate after or before matrix multiplication). False = "before", True = "after" (default and cuDNN compatible).</param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.Rescaling(System.Single,System.Single,Tensorflow.Shape)">
            <summary>
            
            </summary>
            <param name="scale"></param>
            <param name="offset"></param>
            <param name="input_shape"></param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.Add">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.Subtract">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.GlobalAveragePooling2D">
            <summary>
            Global max pooling operation for spatial data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.GlobalAveragePooling1D(System.String)">
            <summary>
            Global average pooling operation for temporal data.
            </summary>
            <param name="data_format"> A string, one of channels_last (default) or channels_first. The ordering of the dimensions in the inputs. 
            channels_last corresponds to inputs with shape (batch, steps, features) while channels_first corresponds to inputs with shape (batch, features, steps).
            </param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.GlobalAveragePooling2D(System.String)">
            <summary>
            Global max pooling operation for spatial data.
            </summary>
            <param name="data_format">A string, one of channels_last (default) or channels_first. The ordering of the dimensions in the inputs. 
            channels_last corresponds to inputs with shape (batch, height, width, channels) while channels_first corresponds to inputs with shape (batch, channels, height, width).</param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.GlobalMaxPooling1D(System.String)">
            <summary>
            Global max pooling operation for 1D temporal data.
            Downsamples the input representation by taking the maximum value over the time dimension.
            </summary>
            <param name="data_format"> A string, one of channels_last (default) or channels_first. The ordering of the dimensions in the inputs. 
            channels_last corresponds to inputs with shape (batch, steps, features) while channels_first corresponds to inputs with shape (batch, features, steps).
            </param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.GlobalMaxPooling2D(System.String)">
            <summary>
            Global max pooling operation for spatial data.
            </summary>
            <param name="data_format">A string, one of channels_last (default) or channels_first. The ordering of the dimensions in the inputs. 
            channels_last corresponds to inputs with shape (batch, height, width, channels) while channels_first corresponds to inputs with shape (batch, channels, height, width).</param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.GetInitializerByName(System.String)">
            <summary>
            Get an weights initializer from its name.
            </summary>
            <param name="name">The name of the initializer. One of zeros, ones, and glorot_uniform.</param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.Concatenate(System.Int32)">
            <summary>
            Layer that concatenates a list of inputs.
            </summary>
            <param name="axis">Axis along which to concatenate.</param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.UpSampling1D(System.Int32)">
            <summary>
            Upsampling layer for 1D inputs. Repeats each temporal step `size` times along the time axis.
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.ZeroPadding2D(Tensorflow.NumPy.NDArray)">
            <summary>
            Zero-padding layer for 2D input (e.g. picture).
            </summary>
            <param name="padding"></param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.UpSampling2D(Tensorflow.Shape,System.String,System.String)">
            <summary>
            Upsampling layer for 2D inputs.<br/>
            Repeats the rows and columns of the data by size[0] and size[1] respectively.
            </summary>
            <param name="size"></param>
            <param name="data_format"></param>
            <param name="interpolation"></param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.Permute(System.Int32[])">
            <summary>
            Permutes the dimensions of the input according to a given pattern.
            </summary>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LayersApi.Reshape(Tensorflow.Shape)">
            <summary>
            Layer that reshapes inputs into the given shape.
            </summary>
            <param name="target_shape"></param>
            <returns></returns>
        </member>
        <member name="T:Tensorflow.Keras.Layers.Concatenate">
            <summary>
            Layer that concatenates a list of inputs.
            </summary>
        </member>
        <member name="T:Tensorflow.Keras.Layers.CategoryEncoding">
            <summary>
            This layer provides options for condensing data into a categorical encoding when the total number of tokens are known in advance.
            </summary>
        </member>
        <member name="T:Tensorflow.Keras.Layers.IndexLookupCombiner">
            <summary>
            Combiner for the IndexLookup preprocessing layer.
            </summary>
        </member>
        <member name="T:Tensorflow.Keras.Layers.Rescaling">
            <summary>
            Multiply inputs by `scale` and adds `offset`.
            </summary>
        </member>
        <member name="T:Tensorflow.Keras.Layers.Resizing">
            <summary>
            Resize the batched image input to target height and width. 
            The input should be a 4-D tensor in the format of NHWC.
            </summary>
        </member>
        <member name="T:Tensorflow.Keras.Layers.StringLookup">
            <summary>
            Maps strings from a vocabulary to integer indices.
            </summary>
        </member>
        <member name="M:Tensorflow.Keras.Layers.TextVectorization.adapt(Tensorflow.IDatasetV2,System.Boolean)">
            <summary>
            Fits the state of the preprocessing layer to the dataset.
            </summary>
            <param name="data"></param>
            <param name="reset_state"></param>
        </member>
        <member name="T:Tensorflow.Keras.Layers.Reshaping.Cropping2D">
            <summary>
            Crop the input along axis 1 and 2.
            <para> For example: </para>
            <para> shape (1, 5, 5, 5) -- crop2D ((1, 2), (1, 3)) --> shape (1, 2, 1, 5) </para>
            </summary>
        </member>
        <member name="T:Tensorflow.Keras.Layers.Reshaping.Cropping3D">
            <summary>
            Similar to copping 2D
            </summary>
        </member>
        <member name="T:Tensorflow.Keras.Layers.Reshape">
            <summary>
            Layer that reshapes inputs into the given shape.
            </summary>
        </member>
        <member name="T:Tensorflow.Keras.Layers.UpSampling1D">
            <summary>
            Upsampling layer for 1D inputs.
            </summary>
        </member>
        <member name="T:Tensorflow.Keras.Layers.UpSampling2D">
            <summary>
            Upsampling layer for 2D inputs.
            </summary>
        </member>
        <member name="T:Tensorflow.Keras.Layers.ZeroPadding2D">
            <summary>
            Zero-padding layer for 2D input (e.g. picture).
            
            This layer can add rows and columns of zeros
            at the top, bottom, left and right side of an image tensor.
            </summary>
        </member>
        <member name="T:Tensorflow.Keras.Layers.Wrapper">
            <summary>
            Abstract wrapper base class. Wrappers take another layer and augment it in various ways.
            Do not use this class as a layer, it is only an abstract base class.
            Two usable wrappers are the `TimeDistributed` and `Bidirectional` wrappers.
            </summary>
        </member>
        <member name="T:Tensorflow.Keras.Layers.Bidirectional">
            <summary>
            Bidirectional wrapper for RNNs.
            </summary>
        </member>
        <member name="T:Tensorflow.Keras.Layers.GRUCell">
            <summary>
            Cell class for the GRU layer.
            </summary>
        </member>
        <member name="T:Tensorflow.Keras.Layers.LSTM">
            <summary>
            Long Short-Term Memory layer - Hochreiter 1997.
            
            See [the Keras RNN API guide](https://www.tensorflow.org/guide/keras/rnn)
            for details about the usage of RNN API.
            </summary>
        </member>
        <member name="T:Tensorflow.Keras.Layers.LSTMCell">
            <summary>
            Cell class for the LSTM layer.
            See [the Keras RNN API guide](https://www.tensorflow.org/guide/keras/rnn)
            for details about the usage of RNN API.
            This class processes one step within the whole time sequence input, whereas
            `tf.keras.layer.LSTM` processes the whole sequence.
            </summary>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LSTMCell._compute_carry_and_output(Tensorflow.Tensor[],Tensorflow.Tensor[],Tensorflow.Tensor)">
            <summary>
            Computes carry and output using split kernels.
            </summary>
            <param name="x"></param>
            <param name="h_tm1"></param>
            <param name="c_tm1"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Tensorflow.Keras.Layers.LSTMCell._compute_carry_and_output_fused(Tensorflow.Tensor[],Tensorflow.Tensor)">
            <summary>
            Computes carry and output using fused kernels.
            </summary>
            <param name="z"></param>
            <param name="c_tm1"></param>
            <returns></returns>
        </member>
        <member name="T:Tensorflow.Keras.Layers.RNN">
            <summary>
            Base class for recurrent layers.
            See [the Keras RNN API guide](https://www.tensorflow.org/guide/keras/rnn)
            for details about the usage of RNN API.
            </summary>
        </member>
        <member name="M:Tensorflow.Keras.Layers.RNN.Call(Tensorflow.Tensors,Tensorflow.Tensors,System.Nullable{System.Boolean},Tensorflow.Common.Types.IOptionalArgs)">
            <summary>
            
            </summary>
            <param name="inputs"></param>
            <param name="initial_state">List of initial state tensors to be passed to the first call of the cell</param>
            <param name="training"></param>
            <param name="optional_args"></param>
            <returns></returns>
            <exception cref="T:Tensorflow.ValueError"></exception>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Tensorflow.Keras.Layers.SimpleRNNCell">
            <summary>
            Cell class for SimpleRNN.
            See [the Keras RNN API guide](https://www.tensorflow.org/guide/keras/rnn)
            for details about the usage of RNN API.
            This class processes one step within the whole time sequence input, whereas
            `tf.keras.layer.SimpleRNN` processes the whole sequence.
            </summary>
        </member>
        <member name="T:Tensorflow.Keras.Losses.Loss">
            <summary>
            Loss base class.
            </summary>
        </member>
        <member name="T:Tensorflow.Keras.Metrics.Mean">
            <summary>
            Computes the (weighted) mean of the given values.
            </summary>
        </member>
        <member name="T:Tensorflow.Keras.Metrics.Metric">
            <summary>
            Encapsulates metric logic and state.
            </summary>
        </member>
        <member name="M:Tensorflow.Keras.Metrics.MetricsApi.sparse_categorical_accuracy(Tensorflow.Tensor,Tensorflow.Tensor)">
            <summary>
            Calculates how often predictions matches integer labels.
            </summary>
            <param name="y_true">Integer ground truth values.</param>
            <param name="y_pred">The prediction values.</param>
            <returns>Sparse categorical accuracy values.</returns>
        </member>
        <member name="M:Tensorflow.Keras.Metrics.metrics_utils.sparse_categorical_matches(Tensorflow.Tensor,Tensorflow.Tensor)">
            <summary>
            Creates float Tensor, 1.0 for label-prediction match, 0.0 for mismatch.
            </summary>
            <param name="y_true"></param>
            <param name="y_pred"></param>
            <returns></returns>
        </member>
        <member name="T:Tensorflow.Keras.Metrics.Reduce">
            <summary>
            Encapsulates metrics that perform a reduce operation on the values.
            </summary>
        </member>
        <member name="T:Tensorflow.Keras.Optimizers.Adam">
            <summary>
            Optimizer that implements the Adam algorithm.
            Adam optimization is a stochastic gradient descent method that is based on
            adaptive estimation of first-order and second-order moments.
            </summary>
        </member>
        <member name="M:Tensorflow.Keras.Optimizers.OptimizerApi.Adam(System.Single,System.Single,System.Single,System.Single,System.Boolean,System.String)">
            <summary>
            Adam optimization is a stochastic gradient descent method that is based on
            adaptive estimation of first-order and second-order moments.
            </summary>
            <param name="learning_rate"></param>
            <param name="beta_1"></param>
            <param name="beta_2"></param>
            <param name="epsilon"></param>
            <param name="amsgrad"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Optimizers.OptimizerApi.RMSprop(System.Single,System.Single,System.Single,System.Single,System.Boolean,System.String)">
            <summary>
            Construct a new RMSprop optimizer.
            </summary>
            <param name="learning_rate"></param>
            <param name="rho"></param>
            <param name="momentum"></param>
            <param name="epsilon"></param>
            <param name="centered"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Tensorflow.Keras.Optimizers.OptimizerV2">
            <summary>
            Updated base class for optimizers.
            </summary>
        </member>
        <member name="M:Tensorflow.Keras.Optimizers.OptimizerV2.apply_gradients(System.Collections.Generic.IEnumerable{System.ValueTuple{Tensorflow.Tensor,Tensorflow.IVariableV1}},System.String,System.Boolean)">
            <summary>
            Apply gradients to variables.
            </summary>
            <param name="grads_and_vars"></param>
            <param name="name"></param>
            <param name="experimental_aggregate_gradients"></param>
        </member>
        <member name="M:Tensorflow.Keras.Optimizers.OptimizerV2.apply_gradients(System.Collections.Generic.IEnumerable{System.ValueTuple{Tensorflow.Tensor,Tensorflow.ResourceVariable}},System.String,System.Boolean)">
            <summary>
            Apply gradients to variables.
            </summary>
            <param name="grads_and_vars"></param>
            <param name="name"></param>
            <param name="experimental_aggregate_gradients"></param>
        </member>
        <member name="T:Tensorflow.Keras.Optimizers.PolynomialDecay">
            <summary>
            A LearningRateSchedule that uses a polynomial decay schedule.
            </summary>
        </member>
        <member name="T:Tensorflow.Keras.Optimizers.RMSprop">
            <summary>
            Optimizer that implements the RMSprop algorithm.
            </summary>
        </member>
        <member name="M:Tensorflow.Keras.Preprocessings.DatasetUtils.get_training_or_validation_split``2(``0[],``1[],System.Single,System.String)">
            <summary>
            Potentially restict samples and labels to a training or validation split.
            </summary>
            <param name="samples"></param>
            <param name="labels"></param>
            <param name="validation_split"></param>
            <param name="subset"></param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Preprocessings.DatasetUtils.index_directory(System.String,System.String,System.String[],System.String[],System.Boolean,System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Make list of all files in the subdirs of `directory`, with their labels.
            </summary>
            <param name="directory"></param>
            <param name="labels"></param>
            <param name="formats"></param>
            <param name="class_names"></param>
            <param name="shuffle"></param>
            <param name="seed"></param>
            <param name="follow_links"></param>
            <returns>
            file_paths, labels, class_names
            </returns>
        </member>
        <member name="M:Tensorflow.Keras.Preprocessing.get_classification_statistics(System.Int32[],System.String[])">
            <summary>
            Function that calculates the classification statistics for a given array of classified data. 
            The function takes an array of classified data as input and returns a dictionary containing the count and percentage of each class in the input array. 
            This function can be used to analyze the distribution of classes in a dataset or to evaluate the performance of a classification model.
            </summary>
            <remarks>
            code from copilot
            </remarks>
            <param name="label_ids"></param>
            <param name="label_class_names"></param>
        </member>
        <member name="M:Tensorflow.Keras.Preprocessing.image_dataset_from_directory(System.String,System.String,System.String,System.String[],System.String,System.Int32,Tensorflow.Shape,System.Boolean,System.Nullable{System.Int32},System.Single,System.String,System.String,System.Boolean)">
            <summary>
            Generates a `tf.data.Dataset` from image files in a directory.
            https://www.tensorflow.org/api_docs/python/tf/keras/preprocessing/image_dataset_from_directory
            </summary>
            <param name="directory">Directory where the data is located.</param>
            <param name="labels"></param>
            <param name="label_mode"></param>
            <param name="class_names"></param>
            <param name="color_mode"></param>
            <param name="batch_size"></param>
            <param name="image_size"></param>
            <param name="shuffle"></param>
            <param name="seed"></param>
            <param name="validation_split"></param>
            <param name="subset"></param>
            <param name="interpolation"></param>
            <param name="follow_links"></param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Preprocessing.timeseries_dataset_from_array(Tensorflow.Tensor,System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Int32,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Creates a dataset of sliding windows over a timeseries provided as array.
            </summary>
            <param name="data"></param>
            <param name="sequence_length"></param>
            <param name="sequence_stride"></param>
            <param name="sampling_rate"></param>
            <param name="batch_size"></param>
            <param name="shuffle"></param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Preprocessing.paths_to_dataset(System.String[],Tensorflow.Shape,System.Int32,System.Int32,System.String)">
            <summary>
            图片路径转为数据处理用的dataset
            通常用于预测时读取图片
            </summary>
            <param name="image_paths"></param>
            <param name="image_size"></param>
            <param name="num_channels"></param>
            <param name="interpolation">
            用于调整大小的插值方法。支持`bilinear`、`nearest`、`bicubic`、`area`、`lanczos3`、`lanczos5`、`gaussian`、`mitchellcubic`。
            默认为`'bilinear'`。
            </param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Preprocessing.Resizing(System.Int32,System.Int32,System.String)">
            <summary>
            Image resizing layer
            </summary>
            <param name="height"></param>
            <param name="width"></param>
            <param name="interpolation"></param>
            <returns></returns>
        </member>
        <member name="T:Tensorflow.Keras.Text.Tokenizer">
            <summary>
            Text tokenization API.
            This class allows to vectorize a text corpus, by turning each text into either a sequence of integers 
            (each integer being the index of a token in a dictionary) or into a vector where the coefficient for 
            each token could be binary, based on word count, based on tf-idf...
            </summary>
            <remarks>
            This code is a fairly straight port of the Python code for Keras text preprocessing found at:
            https://github.com/keras-team/keras-preprocessing/blob/master/keras_preprocessing/text.py
            </remarks>
        </member>
        <member name="M:Tensorflow.Keras.Text.Tokenizer.fit_on_texts(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Updates internal vocabulary based on a list of texts. 
            </summary>
            <param name="texts">A list of strings, each containing one or more tokens.</param>
            <remarks>Required before using texts_to_sequences or texts_to_matrix.</remarks>
        </member>
        <member name="M:Tensorflow.Keras.Text.Tokenizer.fit_on_texts(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Updates internal vocabulary based on a list of texts. 
            </summary>
            <param name="texts">A list of list of strings, each containing one token.</param>
            <remarks>Required before using texts_to_sequences or texts_to_matrix.</remarks>
        </member>
        <member name="M:Tensorflow.Keras.Text.Tokenizer.fit_on_sequences(System.Collections.Generic.IEnumerable{System.Int32[]})">
            <summary>
            Updates internal vocabulary based on a list of sequences.
            </summary>
            <param name="sequences"></param>
            <remarks>Required before using sequences_to_matrix (if fit_on_texts was never called).</remarks>
        </member>
        <member name="M:Tensorflow.Keras.Text.Tokenizer.texts_to_sequences(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Transforms each string in texts to a sequence of integers.
            </summary>
            <param name="texts"></param>
            <returns></returns>
            <remarks>Only top num_words-1 most frequent words will be taken into account.Only words known by the tokenizer will be taken into account.</remarks>
        </member>
        <member name="M:Tensorflow.Keras.Text.Tokenizer.texts_to_sequences(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.String}})">
            <summary>
            Transforms each token in texts to a sequence of integers.
            </summary>
            <param name="texts"></param>
            <returns></returns>
            <remarks>Only top num_words-1 most frequent words will be taken into account.Only words known by the tokenizer will be taken into account.</remarks>
        </member>
        <member name="M:Tensorflow.Keras.Text.Tokenizer.sequences_to_texts(System.Collections.Generic.IEnumerable{System.Int32[]})">
            <summary>
            Transforms each sequence into a list of text.
            </summary>
            <param name="sequences"></param>
            <returns>A list of texts(strings)</returns>
            <remarks>Only top num_words-1 most frequent words will be taken into account.Only words known by the tokenizer will be taken into account.</remarks>
        </member>
        <member name="M:Tensorflow.Keras.Text.Tokenizer.texts_to_matrix(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Convert a list of texts to a Numpy matrix.
            </summary>
            <param name="texts">A sequence of strings containing one or more tokens.</param>
            <param name="mode">One of "binary", "count", "tfidf", "freq".</param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Text.Tokenizer.texts_to_matrix(System.Collections.Generic.IEnumerable{System.Collections.Generic.IList{System.String}},System.String)">
            <summary>
            Convert a list of texts to a Numpy matrix.
            </summary>
            <param name="texts">A sequence of lists of strings, each containing one token.</param>
            <param name="mode">One of "binary", "count", "tfidf", "freq".</param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Text.Tokenizer.sequences_to_matrix(System.Collections.Generic.IEnumerable{System.Collections.Generic.IList{System.Int32}},System.String)">
            <summary>
            Converts a list of sequences into a Numpy matrix.
            </summary>
            <param name="sequences">A sequence of lists of integers, encoding tokens.</param>
            <param name="mode">One of "binary", "count", "tfidf", "freq".</param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Saving.hdf5_format.preprocess_weights_for_loading(Tensorflow.Keras.ILayer,System.Collections.Generic.List{Tensorflow.NumPy.NDArray},System.String,System.String)">
            <summary>
            Preprocess layer weights between different Keras formats.
            </summary>
            <param name="layer"></param>
            <param name="weights"></param>
            <param name="original_keras_version"></param>
            <param name="original_backend"></param>
        </member>
        <member name="M:Tensorflow.Keras.Saving.hdf5_format._convert_rnn_weights(Tensorflow.Keras.ILayer,System.Collections.Generic.List{Tensorflow.NumPy.NDArray})">
            <summary>
            Converts weights for RNN layers between native and CuDNN format.
            </summary>
            <param name="layer"></param>
            <param name="weights"></param>
        </member>
        <member name="M:Tensorflow.Keras.Saving.KerasObjectLoader.load_layers(System.Boolean)">
            <summary>
            Load all layer nodes from the metadata.
            </summary>
            <param name="compile"></param>
        </member>
        <member name="M:Tensorflow.Keras.Saving.KerasObjectLoader.finalize_objects">
             <summary>
             Finish setting up Keras objects.
            
             This function is executed after all objects and functions have been created.
             Call functions and losses are attached to each layer, and once all layers
             have been fully set up, graph networks are initialized.
            
             Subclassed models that are revived from the SavedModel are treated like
             layers, and have their call/loss functions attached here.
             </summary>
        </member>
        <member name="M:Tensorflow.Keras.Saving.KerasObjectLoader.del_tracking">
            <summary>
            Removes tracked references that are only used when loading the model.
            Now that the node object has been fully loaded, and the checkpoint has
            been restored, the object no longer needs to track objects added from
            SerializedAttributes. (Note that saving a training checkpoint still
            functions correctly, because layers and variables are tracked
            separately by the Layer object.)
            </summary>
        </member>
        <member name="M:Tensorflow.Keras.Saving.KerasObjectLoader._finalize_config_layers(System.Collections.Generic.List{Tensorflow.Keras.Engine.Layer})">
            <summary>
            Runs the final steps of loading Keras Layers from config.
            </summary>
            <param name="layers"></param>
        </member>
        <member name="M:Tensorflow.Keras.Saving.KerasObjectLoader._finalize_saved_model_layers(System.Collections.Generic.List{Tensorflow.Keras.Engine.Layer})">
            <summary>
            Runs the final steps of loading Keras Layers from SavedModel.
            </summary>
            <param name="layers"></param>
        </member>
        <member name="M:Tensorflow.Keras.Saving.KerasObjectLoader._unblock_model_reconstruction(System.Int32,Tensorflow.Keras.Engine.Layer)">
            <summary>
            Removes layer from blocking model reconstruction.
            </summary>
            <param name="layer_id"></param>
            <param name="layer"></param>
        </member>
        <member name="M:Tensorflow.Keras.Saving.KerasObjectLoader._revive_from_config(System.String,Tensorflow.Keras.Saving.KerasMetaData,System.Int32)">
            <summary>
            Revives a layer/model from config, or returns None.
            </summary>
            <param name="identifier"></param>
            <param name="metadata"></param>
            <param name="node_id"></param>
        </member>
        <member name="M:Tensorflow.Keras.Saving.KerasObjectLoader._get_child_layer_node_ids(System.Int32)">
            <summary>
            Returns the node ids of each layer in a Sequential/Functional model.
            </summary>
            <param name="node_id"></param>
        </member>
        <member name="M:Tensorflow.Keras.Saving.KerasObjectLoader._add_children_recreated_from_config(Tensorflow.Train.Trackable,Tensorflow.SavedObject,System.Int32)">
            <summary>
            Recursively records objects recreated from config.
            </summary>
            <param name="obj"></param>
            <param name="proto"></param>
            <param name="node_id"></param>
        </member>
        <member name="M:Tensorflow.Keras.Saving.KerasObjectLoader._infer_inputs(System.Int32)">
            <summary>
            Infers input shape of layer from SavedModel functions.
            </summary>
            <param name="layer_node_id"></param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Saving.KerasObjectLoader._config_node_setter(System.Action{System.Object,System.Object,System.Object})">
            <summary>
            Creates edges for nodes that are recreated from config.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Tensorflow.Keras.Saving.SavedModel.Constants.KERAS_ATTR">
            <summary>
            Namespace used to store all attributes added during serialization.
            e.g. the list of layers can be accessed using `loaded.keras_api.layers`, in an
            object loaded from `tf.saved_model.load()`.
            </summary>
        </member>
        <member name="F:Tensorflow.Keras.Saving.SavedModel.Constants.KERAS_CACHE_KEY">
            <summary>
            Keys for the serialization cache.
            Maps to the keras serialization dict {Layer --> SerializedAttributes object}
            </summary>
        </member>
        <member name="F:Tensorflow.Keras.Saving.SavedModel.Constants.SAVED_METADATA_PATH">
            <summary>
            Name of Keras metadata file stored in the SavedModel.
            </summary>
        </member>
        <member name="M:Tensorflow.Keras.Saving.SavedModel.LayerSavedModelSaver.get_serialized_attributes(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{Tensorflow.Train.Trackable,Tensorflow.Keras.Saving.SavedModel.ISerializedAttributes}})">
            <summary>
            Generates or retrieves serialized attributes from cache.
            </summary>
            <param name="serialization_cache"></param>
        </member>
        <member name="M:Tensorflow.Keras.Saving.SavedModel.LayerSavedModelSaver.get_serialized_attributes_internal(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{Tensorflow.Train.Trackable,Tensorflow.Keras.Saving.SavedModel.ISerializedAttributes}})">
            <summary>
            Returns dictionary of serialized attributes.
            </summary>
            <param name="serialization_cache"></param>
        </member>
        <member name="M:Tensorflow.Keras.Saving.SavedModel.KerasLoadModelUtils.load_model(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Boolean,Tensorflow.LoadOptions)">
            <summary>
            Corresponding to keras/saving/save.py/load_model
            </summary>
            <param name="filepath"></param>
            <param name="custom_objects"></param>
            <param name="compile"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Saving.SavedModel.KerasSavedModelUtils.wrap_layer_objects(Tensorflow.Keras.Engine.Layer,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{Tensorflow.Train.Trackable,Tensorflow.Keras.Saving.SavedModel.ISerializedAttributes}})">
            <summary>
            Returns extra trackable objects to attach to the serialized layer.
            </summary>
            <param name="layer"></param>
            <param name="serialization_cache"></param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Saving.SavedModel.KerasSavedModelUtils.wrap_layer_functions(Tensorflow.Keras.Engine.Layer,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{Tensorflow.Train.Trackable,Tensorflow.Keras.Saving.SavedModel.ISerializedAttributes}})">
            <summary>
            Returns dict of wrapped layer call function and losses in tf.functions.
            </summary>
            <param name="layer"></param>
            <param name="serialization_cache"></param>
            <returns></returns>
        </member>
        <member name="T:Tensorflow.Keras.Saving.SavedModel.SerializedAttributes">
            <summary>
            Class that tracks and validates all serialization attributes.
            </summary>
        </member>
        <member name="P:Tensorflow.Keras.Saving.SavedModel.SerializedAttributes.FunctionsToSerialize">
            <summary>
            Returns functions to attach to the root object during serialization.
            </summary>
        </member>
        <member name="P:Tensorflow.Keras.Saving.SavedModel.SerializedAttributes.ObjectsToSerialize">
            <summary>
            Returns objects to attach to the root object during serialization.
            </summary>
        </member>
        <member name="M:Tensorflow.Keras.Saving.SavedModel.SerializedAttributes.set_and_validate_functions(System.Collections.Generic.IDictionary{System.String,Tensorflow.Train.Trackable})">
            <summary>
            Saves function dictionary, and validates dictionary values.
            </summary>
            <param name="function_dict"></param>
        </member>
        <member name="M:Tensorflow.Keras.Saving.SavedModel.SerializedAttributes.set_and_validate_objects(System.Collections.Generic.IDictionary{System.String,Tensorflow.Train.Trackable})">
            <summary>
            Saves objects to a dictionary, and validates the values.
            </summary>
            <param name="object_dict"></param>
        </member>
        <member name="M:Tensorflow.Keras.Saving.SavedModel.SerializedAttributes.Create(Tensorflow.Train.Trackable)">
            <summary>
            Returns a new SerializedAttribute object (corresponding to `new` of tensorflow python).
            </summary>
            <returns></returns>
        </member>
        <member name="T:Tensorflow.Keras.Saving.SavedModel.SaveOptionsContext">
            <summary>
            Implementation of this class is different with that of python.
            But it could be used with `using` the same as `with` of python.
            </summary>
        </member>
        <member name="F:Tensorflow.Keras.Saving.SharedObjectSavingScope._nestedDepth">
            <summary>
            record how many times the scope is nested.
            </summary>
        </member>
        <member name="M:Tensorflow.Keras.Saving.serialize_utils.serialize_keras_class_and_config(System.String,Newtonsoft.Json.Linq.JToken,System.Object,System.Nullable{System.Int32})">
            <summary>
            Returns the serialization of the class with the given config.
            </summary>
            <param name="class_name"></param>
            <param name="config"></param>
            <param name="obj"></param>
            <param name="shared_object_id"></param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Sequence.pad_sequences(System.Collections.Generic.IEnumerable{System.Int32[]},System.Nullable{System.Int32},System.String,System.String,System.String,System.Object)">
            <summary>
            Pads sequences to the same length.
            https://keras.io/preprocessing/sequence/
            https://faroit.github.io/keras-docs/1.2.0/preprocessing/sequence/
            </summary>
            <param name="sequences">List of lists, where each element is a sequence.</param>
            <param name="maxlen">Int, maximum length of all sequences.</param>
            <param name="dtype">Type of the output sequences.</param>
            <param name="padding">String, 'pre' or 'post':</param>
            <param name="truncating">String, 'pre' or 'post'</param>
            <param name="value">Float or String, padding value.</param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.tensorflow_layers.layers_internal.batch_normalization(Tensorflow.Tensor,System.Int32,System.Single,System.Single,System.Boolean,System.Boolean,Tensorflow.IInitializer,Tensorflow.IInitializer,Tensorflow.IInitializer,Tensorflow.IInitializer,Tensorflow.Tensor,System.Boolean,System.String,System.Boolean,System.Single)">
            <summary>
            Functional interface for the batch normalization layer.
            http://arxiv.org/abs/1502.03167
            </summary>
            <param name="inputs"></param>
            <param name="axis"></param>
            <param name="momentum"></param>
            <param name="epsilon"></param>
            <param name="center"></param>
            <param name="scale"></param>
            <param name="beta_initializer"></param>
            <param name="gamma_initializer"></param>
            <param name="moving_mean_initializer"></param>
            <param name="moving_variance_initializer"></param>
            <param name="training"></param>
            <param name="trainable"></param>
            <param name="name"></param>
            <param name="renorm"></param>
            <param name="renorm_momentum"></param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.tensorflow_layers.layers_internal.MaxPooling2D(Tensorflow.Tensor,System.Int32[],System.Int32[],System.String,System.String,System.String)">
            <summary>
            Max pooling layer for 2D inputs (e.g. images).
            </summary>
            <param name="inputs">The tensor over which to pool. Must have rank 4.</param>
            <param name="pool_size"></param>
            <param name="strides"></param>
            <param name="padding"></param>
            <param name="data_format"></param>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.tensorflow_layers.layers_internal.dense(Tensorflow.Tensor,System.Int32,Tensorflow.Keras.Activation,System.Boolean,Tensorflow.IInitializer,Tensorflow.IInitializer,System.Boolean,System.String,System.Nullable{System.Boolean})">
            <summary>
                Densely-connected layer class. aka fully-connected<br></br>
                `outputs = activation(inputs * kernel + bias)`
            </summary>
            <param name="inputs"></param>
            <param name="units">Python integer, dimensionality of the output space.</param>
            <param name="activation"></param>
            <param name="use_bias">Boolean, whether the layer uses a bias.</param>
            <param name="kernel_initializer"></param>
            <param name="bias_initializer"></param>
            <param name="trainable"></param>
            <param name="name"></param>
            <param name="reuse"></param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.tensorflow_layers.layers_internal.flatten(Tensorflow.Tensor,System.String,System.String)">
            <summary>
                Flattens an input tensor while preserving the batch axis (axis 0).
            </summary>
            <param name="inputs">Tensor input.</param>
            <param name="name">The name of the layer.</param>
            <param name="data_format">
                A string, one of `channels_last` (default) or `channels_first`. <br></br>
                The ordering of the dimensions in the inputs. <br></br>
                `channels_last` corresponds to inputs with shape <br></br>
                `(batch, height, width, channels)` while `channels_first` corresponds to <br></br>
                inputs with shape `(batch, channels, height, width)`. 
            </param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Utils.base_layer_utils.make_variable(Tensorflow.VariableArgs)">
            <summary>
            Adds a new variable to the layer.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Utils.base_layer_utils.unique_layer_name(System.String,System.Collections.Generic.Dictionary{System.String,System.Int32},System.String[],System.Boolean)">
            <summary>
            Makes a layer name (or arbitrary string) unique within a TensorFlow graph. (correponding to `backend.unique_object_name` of python.)
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Utils.generic_utils.serialize_layer_to_config(Tensorflow.Keras.ILayer)">
            <summary>
            This method does not have corresponding method in python. It's close to `serialize_keras_object`.
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Utils.generic_utils.validate_config(Newtonsoft.Json.Linq.JObject)">
            <summary>
            Determines whether config appears to be a valid layer config.
            </summary>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Utils.KerasUtils.get_file(System.String,System.String,System.Boolean,System.String,System.String,System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Downloads a file from a URL if it not already in the cache.
            </summary>
            <param name="fname">Name of the file</param>
            <param name="origin">Original URL of the file</param>
            <param name="untar"></param>
            <param name="md5_hash"></param>
            <param name="file_hash"></param>
            <param name="cache_subdir"></param>
            <param name="hash_algorithm"></param>
            <param name="extract"></param>
            <param name="archive_format"></param>
            <param name="cache_dir"></param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Utils.layer_utils.print_layer_summary(Tensorflow.Keras.ILayer,System.Int32[])">
            <summary>
            Prints a summary for a single layer.
            </summary>
            <param name="layer"></param>
        </member>
        <member name="M:Tensorflow.Keras.Utils.np_utils.to_categorical(Tensorflow.NumPy.NDArray,System.Int32,Tensorflow.TF_DataType)">
            <summary>
            Converts a class vector (integers) to binary class matrix.
            </summary>
            <param name="y"></param>
            <param name="num_classes"></param>
            <param name="dtype"></param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Utils.RnnUtils.standardize_args(Tensorflow.Tensors,Tensorflow.Tensors,Tensorflow.Tensors,System.Int32)">
            <summary>
            Standardizes `__call__` to a single list of tensor inputs.
            
            When running a model loaded from a file, the input tensors
            `initial_state` and `constants` can be passed to `RNN.__call__()` as part
            of `inputs` instead of by the dedicated keyword arguments.This method
            makes sure the arguments are separated and that `initial_state` and
            `constants` are lists of tensors(or None).
            </summary>
            <param name="inputs">Tensor or list/tuple of tensors. which may include constants
            and initial states.In that case `num_constant` must be specified.</param>
            <param name="initial_state">Tensor or list of tensors or None, initial states.</param>
            <param name="constants">Tensor or list of tensors or None, constant tensors.</param>
            <param name="num_constants">Expected number of constants (if constants are passed as
            part of the `inputs` list.</param>
            <returns></returns>
        </member>
        <member name="M:Tensorflow.Keras.Utils.RnnUtils.is_multiple_state(Tensorflow.Common.Types.INestStructure{System.Int64})">
            <summary>
            Check whether the state_size contains multiple states.
            </summary>
            <param name="state_size"></param>
            <returns></returns>
        </member>
        <member name="T:Tensorflow.KerasApi">
            <summary>
            Deprecated, will use tf.keras
            </summary>
        </member>
        <member name="T:ThirdParty.Tensorflow.Python.Keras.Protobuf.ProjectorConfigReflection">
            <summary>Holder for reflection information generated from tensorflow/python/keras/protobuf/projector_config.proto</summary>
        </member>
        <member name="P:ThirdParty.Tensorflow.Python.Keras.Protobuf.ProjectorConfigReflection.Descriptor">
            <summary>File descriptor for tensorflow/python/keras/protobuf/projector_config.proto</summary>
        </member>
        <member name="F:ThirdParty.Tensorflow.Python.Keras.Protobuf.SpriteMetadata.ImagePathFieldNumber">
            <summary>Field number for the "image_path" field.</summary>
        </member>
        <member name="F:ThirdParty.Tensorflow.Python.Keras.Protobuf.SpriteMetadata.SingleImageDimFieldNumber">
            <summary>Field number for the "single_image_dim" field.</summary>
        </member>
        <member name="P:ThirdParty.Tensorflow.Python.Keras.Protobuf.SpriteMetadata.SingleImageDim">
            <summary>
            [width, height] of a single image in the sprite.
            </summary>
        </member>
        <member name="F:ThirdParty.Tensorflow.Python.Keras.Protobuf.EmbeddingInfo.TensorNameFieldNumber">
            <summary>Field number for the "tensor_name" field.</summary>
        </member>
        <member name="F:ThirdParty.Tensorflow.Python.Keras.Protobuf.EmbeddingInfo.MetadataPathFieldNumber">
            <summary>Field number for the "metadata_path" field.</summary>
        </member>
        <member name="F:ThirdParty.Tensorflow.Python.Keras.Protobuf.EmbeddingInfo.BookmarksPathFieldNumber">
            <summary>Field number for the "bookmarks_path" field.</summary>
        </member>
        <member name="F:ThirdParty.Tensorflow.Python.Keras.Protobuf.EmbeddingInfo.TensorShapeFieldNumber">
            <summary>Field number for the "tensor_shape" field.</summary>
        </member>
        <member name="P:ThirdParty.Tensorflow.Python.Keras.Protobuf.EmbeddingInfo.TensorShape">
            <summary>
            Shape of the 2D tensor [N x D]. If missing, it will be inferred from the
            model checkpoint.
            </summary>
        </member>
        <member name="F:ThirdParty.Tensorflow.Python.Keras.Protobuf.EmbeddingInfo.SpriteFieldNumber">
            <summary>Field number for the "sprite" field.</summary>
        </member>
        <member name="F:ThirdParty.Tensorflow.Python.Keras.Protobuf.EmbeddingInfo.TensorPathFieldNumber">
            <summary>Field number for the "tensor_path" field.</summary>
        </member>
        <member name="P:ThirdParty.Tensorflow.Python.Keras.Protobuf.EmbeddingInfo.TensorPath">
            <summary>
            Path to the TSV file holding the tensor values. If missing, the tensor
            is assumed to be stored in the model checkpoint.
            </summary>
        </member>
        <member name="F:ThirdParty.Tensorflow.Python.Keras.Protobuf.ProjectorConfig.ModelCheckpointPathFieldNumber">
            <summary>Field number for the "model_checkpoint_path" field.</summary>
        </member>
        <member name="P:ThirdParty.Tensorflow.Python.Keras.Protobuf.ProjectorConfig.ModelCheckpointPath">
            <summary>
            Path to the checkpoint file. Use either this or model_checkpoint_dir.
            </summary>
        </member>
        <member name="F:ThirdParty.Tensorflow.Python.Keras.Protobuf.ProjectorConfig.EmbeddingsFieldNumber">
            <summary>Field number for the "embeddings" field.</summary>
        </member>
        <member name="F:ThirdParty.Tensorflow.Python.Keras.Protobuf.ProjectorConfig.ModelCheckpointDirFieldNumber">
            <summary>Field number for the "model_checkpoint_dir" field.</summary>
        </member>
        <member name="P:ThirdParty.Tensorflow.Python.Keras.Protobuf.ProjectorConfig.ModelCheckpointDir">
            <summary>
            Path to the checkpoint directory. The directory will be scanned for the
            latest checkpoint file.
            </summary>
        </member>
        <member name="T:ThirdParty.Tensorflow.Python.Keras.Protobuf.SavedMetadataReflection">
            <summary>Holder for reflection information generated from tensorflow/python/keras/protobuf/saved_metadata.proto</summary>
        </member>
        <member name="P:ThirdParty.Tensorflow.Python.Keras.Protobuf.SavedMetadataReflection.Descriptor">
            <summary>File descriptor for tensorflow/python/keras/protobuf/saved_metadata.proto</summary>
        </member>
        <member name="F:ThirdParty.Tensorflow.Python.Keras.Protobuf.SavedMetadata.NodesFieldNumber">
            <summary>Field number for the "nodes" field.</summary>
        </member>
        <member name="P:ThirdParty.Tensorflow.Python.Keras.Protobuf.SavedMetadata.Nodes">
            <summary>
            Nodes represent trackable objects in the SavedModel. The data for every
            Keras object is stored.
            </summary>
        </member>
        <member name="T:ThirdParty.Tensorflow.Python.Keras.Protobuf.SavedObject">
            <summary>
            Metadata of an individual Keras object.
            </summary>
        </member>
        <member name="F:ThirdParty.Tensorflow.Python.Keras.Protobuf.SavedObject.NodeIdFieldNumber">
            <summary>Field number for the "node_id" field.</summary>
        </member>
        <member name="P:ThirdParty.Tensorflow.Python.Keras.Protobuf.SavedObject.NodeId">
            <summary>
            Index of the node in the SavedModel SavedObjectGraph.
            </summary>
        </member>
        <member name="F:ThirdParty.Tensorflow.Python.Keras.Protobuf.SavedObject.NodePathFieldNumber">
            <summary>Field number for the "node_path" field.</summary>
        </member>
        <member name="P:ThirdParty.Tensorflow.Python.Keras.Protobuf.SavedObject.NodePath">
            <summary>
            String path from root (e.g. "root.child_layer")
            </summary>
        </member>
        <member name="F:ThirdParty.Tensorflow.Python.Keras.Protobuf.SavedObject.IdentifierFieldNumber">
            <summary>Field number for the "identifier" field.</summary>
        </member>
        <member name="P:ThirdParty.Tensorflow.Python.Keras.Protobuf.SavedObject.Identifier">
            <summary>
            Identifier to determine loading function.
            Must be one of:
              _tf_keras_input_layer, _tf_keras_layer, _tf_keras_metric,
              _tf_keras_model, _tf_keras_network, _tf_keras_rnn_layer,
              _tf_keras_sequential
            </summary>
        </member>
        <member name="F:ThirdParty.Tensorflow.Python.Keras.Protobuf.SavedObject.MetadataFieldNumber">
            <summary>Field number for the "metadata" field.</summary>
        </member>
        <member name="P:ThirdParty.Tensorflow.Python.Keras.Protobuf.SavedObject.Metadata">
            <summary>
            Metadata containing a JSON-serialized object with the non-TensorFlow
            attributes for this Keras object.
            </summary>
        </member>
        <member name="F:ThirdParty.Tensorflow.Python.Keras.Protobuf.SavedObject.VersionFieldNumber">
            <summary>Field number for the "version" field.</summary>
        </member>
        <member name="P:ThirdParty.Tensorflow.Python.Keras.Protobuf.SavedObject.Version">
            <summary>
            Version defined by the code serializing this Keras object.
            </summary>
        </member>
        <member name="T:ThirdParty.Tensorflow.Python.Keras.Protobuf.VersionsReflection">
            <summary>Holder for reflection information generated from tensorflow/python/keras/protobuf/versions.proto</summary>
        </member>
        <member name="P:ThirdParty.Tensorflow.Python.Keras.Protobuf.VersionsReflection.Descriptor">
            <summary>File descriptor for tensorflow/python/keras/protobuf/versions.proto</summary>
        </member>
        <member name="T:ThirdParty.Tensorflow.Python.Keras.Protobuf.VersionDef">
             <summary>
             Version information for a piece of serialized data
            
             There are different types of versions for each type of data
             (GraphDef, etc.), but they all have the same common shape
             described here.
            
             Each consumer has "consumer" and "min_producer" versions (specified
             elsewhere).  A consumer is allowed to consume this data if
            
               producer >= min_producer
               consumer >= min_consumer
               consumer not in bad_consumers
            
             LINT.IfChange
             </summary>
        </member>
        <member name="F:ThirdParty.Tensorflow.Python.Keras.Protobuf.VersionDef.ProducerFieldNumber">
            <summary>Field number for the "producer" field.</summary>
        </member>
        <member name="P:ThirdParty.Tensorflow.Python.Keras.Protobuf.VersionDef.Producer">
            <summary>
            The version of the code that produced this data.
            </summary>
        </member>
        <member name="F:ThirdParty.Tensorflow.Python.Keras.Protobuf.VersionDef.MinConsumerFieldNumber">
            <summary>Field number for the "min_consumer" field.</summary>
        </member>
        <member name="P:ThirdParty.Tensorflow.Python.Keras.Protobuf.VersionDef.MinConsumer">
            <summary>
            Any consumer below this version is not allowed to consume this data.
            </summary>
        </member>
        <member name="F:ThirdParty.Tensorflow.Python.Keras.Protobuf.VersionDef.BadConsumersFieldNumber">
            <summary>Field number for the "bad_consumers" field.</summary>
        </member>
        <member name="P:ThirdParty.Tensorflow.Python.Keras.Protobuf.VersionDef.BadConsumers">
            <summary>
            Specific consumer versions which are disallowed (e.g. due to bugs).
            </summary>
        </member>
    </members>
</doc>
