<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PureHDF</name>
    </assembly>
    <members>
        <member name="T:PureHDF.H5Constants">
            <summary>
            A class to group constants.
            </summary>
        </member>
        <member name="F:PureHDF.H5Constants.Unlimited">
            <summary>
            This constant is used to specify an unlimited dimension.
            </summary>
        </member>
        <member name="T:PureHDF.H5DataLayoutClass">
            <summary>
            Specifies the data layout class.
            </summary>
        </member>
        <member name="F:PureHDF.H5DataLayoutClass.Compact">
            <summary>
            The data is stored within the object's metadata.
            </summary>
        </member>
        <member name="F:PureHDF.H5DataLayoutClass.Contiguous">
            <summary>
            THe data is stored as one contiguous block of data.
            </summary>
        </member>
        <member name="F:PureHDF.H5DataLayoutClass.Chunked">
            <summary>
            The data is stored in chunks.
            </summary>
        </member>
        <member name="F:PureHDF.H5DataLayoutClass.VirtualStorage">
            <summary>
            The data is a virtual view composed of other datasets.
            </summary>
        </member>
        <member name="T:PureHDF.H5DataspaceType">
            <summary>
            The dataspace type.
            </summary>
        </member>
        <member name="F:PureHDF.H5DataspaceType.Scalar">
            <summary>
            A scalar dataspace.
            </summary>
        </member>
        <member name="F:PureHDF.H5DataspaceType.Simple">
            <summary>
            A simple dataspace.
            </summary>
        </member>
        <member name="F:PureHDF.H5DataspaceType.Null">
            <summary>
            A null-dataspace.
            </summary>
        </member>
        <member name="T:PureHDF.H5DataTypeClass">
            <summary>
            Specifies the data type class.
            </summary>
        </member>
        <member name="F:PureHDF.H5DataTypeClass.FixedPoint">
            <summary>
            A fixed-point number.
            </summary>
        </member>
        <member name="F:PureHDF.H5DataTypeClass.FloatingPoint">
            <summary>
            A floating-point number.
            </summary>
        </member>
        <member name="F:PureHDF.H5DataTypeClass.Time">
            <summary>
            A time structure. Not supported.
            </summary>
        </member>
        <member name="F:PureHDF.H5DataTypeClass.String">
            <summary>
            A string.
            </summary>
        </member>
        <member name="F:PureHDF.H5DataTypeClass.BitField">
            <summary>
            A bitfield.
            </summary>
        </member>
        <member name="F:PureHDF.H5DataTypeClass.Opaque">
            <summary>
            An opaque blob of bytes.
            </summary>
        </member>
        <member name="F:PureHDF.H5DataTypeClass.Compound">
            <summary>
            A compound data type.
            </summary>
        </member>
        <member name="F:PureHDF.H5DataTypeClass.Reference">
            <summary>
            A reference.
            </summary>
        </member>
        <member name="F:PureHDF.H5DataTypeClass.Enumerated">
            <summary>
            An enumeration.
            </summary>
        </member>
        <member name="F:PureHDF.H5DataTypeClass.VariableLength">
            <summary>
            A variable-length data type (string or sequence).
            </summary>
        </member>
        <member name="F:PureHDF.H5DataTypeClass.Array">
            <summary>
            An array data type.
            </summary>
        </member>
        <member name="T:PureHDF.H5File">
            <summary>
            Entry-point for PureHDF.
            </summary>
        </member>
        <member name="M:PureHDF.H5File.OpenRead(System.String,PureHDF.H5ReadOptions)">
            <summary>
            Opens an HDF5 file for reading. Please see the <seealso href="https://learn.microsoft.com/en-us/dotnet/api/system.io.file.openread#remarks">Remarks</seealso> section for more information how the file is opened.
            </summary>
            <param name="filePath">The path of the file to open.</param>
            <param name="options">Options to control decoding behavior.</param>
        </member>
        <member name="M:PureHDF.H5File.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare,PureHDF.H5ReadOptions)">
            <summary>
            Opens an HDF5 file.
            </summary>
            <param name="filePath">The path of the file to open.</param>
            <param name="mode">A <see cref="T:System.IO.FileMode"/> value that specifies whether a file is created if one does not exist, and determines whether the contents of existing files are retained or overwritten.</param>
            <param name="fileAccess">A <see cref="T:System.IO.FileAccess"/> value that specifies the operations that can be performed on the file.</param>
            <param name="fileShare">A <see cref="T:System.IO.FileShare"/> value specifying the type of access other threads have to the file.</param>
            <param name="options">Options to control decoding behavior.</param>
        </member>
        <member name="M:PureHDF.H5File.Open(System.IO.Stream,System.Boolean,PureHDF.H5ReadOptions)">
            <summary>
            Opens an HDF5 stream.
            </summary>
            <param name="stream">The stream to use. It must be readable and seekable.</param>
            <param name="leaveOpen">A boolean which indicates if the stream should be kept open when this class is disposed. The default is <see langword="false"/>.</param>
            <param name="options">Options to control decoding behavior.</param>
        </member>
        <member name="M:PureHDF.H5File.Open(System.IO.MemoryMappedFiles.MemoryMappedViewAccessor,PureHDF.H5ReadOptions)">
            <summary>
            Opens an HDF5 memory-mapped file.
            </summary>
            <param name="accessor">The memory-mapped accessor to use.</param>
            <param name="options">Options to control decoding behavior.</param>
        </member>
        <member name="M:PureHDF.H5File.Write(System.String,PureHDF.H5WriteOptions)">
            <summary>
            Creates a new file, write the contents to the file, and then closes the file. If the target file already exists, it is overwritten.
            </summary>
            <param name="filePath">The path of the file to write the contents into.</param>
            <param name="options">Options to control encoding behavior.</param>
        </member>
        <member name="M:PureHDF.H5File.Write(System.IO.Stream,PureHDF.H5WriteOptions)">
            <summary>
            Writes the contents to the specified stream.
            </summary>
            <param name="stream">The stream to write the contents into. It must be readable, writeable and seekable.</param>
            <param name="options">Options to control encoding behavior.</param>
        </member>
        <member name="M:PureHDF.H5File.BeginWrite(System.String,PureHDF.H5WriteOptions)">
            <summary>
            Creates a new file, write the contents to the file and returns a writer which allows to write more data to the file until the writer gets disposed. If the target file already exists, it is overwritten.
            </summary>
            <param name="filePath">The path of the file to write the contents into.</param>
            <param name="options">Options to control encoding behavior.</param>
        </member>
        <member name="M:PureHDF.H5File.BeginWrite(System.IO.Stream,PureHDF.H5WriteOptions)">
            <summary>
            Writes the contents to the specified stream and returns a writer which allows to write more data to the stream until the writer gets disposed.
            </summary>
            <param name="stream">The stream to write the contents into. It must be readable, writeable and seekable.</param>
            <param name="options">Options to control encoding behavior.</param>
        </member>
        <member name="T:PureHDF.H5NameAttribute">
            <summary>
            Specifies the member name that is present in the HDF5 compound data type.
            </summary>
        </member>
        <member name="M:PureHDF.H5NameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PureHDF.H5NameAttribute"/> class.
            </summary>
            <param name="name">The name of the member.</param>
        </member>
        <member name="P:PureHDF.H5NameAttribute.Name">
            <summary>
            Gets the name of the member.
            </summary>
        </member>
        <member name="T:PureHDF.H5ReadOptions">
            <summary>
            Provides options to be used with <see cref="T:PureHDF.H5File"/>.
            </summary>
            <param name="IncludeStructFields">A value that indicates whether struct fields are handled during serialization. The default value is <see langword="true"/>.</param>
            <param name="IncludeStructProperties">A value that indicates whether struct properties are handled during serialization. The default value is <see langword="false"/>.</param>
            <param name="IncludeClassFields">A value that indicates whether class fields are handled during serialization. The default value is <see langword="false"/>.</param>
            <param name="IncludeClassProperties">A value that indicates whether class properties are handled during serialization. The default value is <see langword="true"/>.</param>
            <param name="FieldNameMapper">Maps a <see cref="T:System.Reflection.FieldInfo"/> to the name of the HDF5 member.</param>
            <param name="PropertyNameMapper">Maps a <see cref="T:System.Reflection.PropertyInfo"/> to the name of the HDF5 member.</param>
        </member>
        <member name="M:PureHDF.H5ReadOptions.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Func{System.Reflection.FieldInfo,System.String},System.Func{System.Reflection.PropertyInfo,System.String})">
            <summary>
            Provides options to be used with <see cref="T:PureHDF.H5File"/>.
            </summary>
            <param name="IncludeStructFields">A value that indicates whether struct fields are handled during serialization. The default value is <see langword="true"/>.</param>
            <param name="IncludeStructProperties">A value that indicates whether struct properties are handled during serialization. The default value is <see langword="false"/>.</param>
            <param name="IncludeClassFields">A value that indicates whether class fields are handled during serialization. The default value is <see langword="false"/>.</param>
            <param name="IncludeClassProperties">A value that indicates whether class properties are handled during serialization. The default value is <see langword="true"/>.</param>
            <param name="FieldNameMapper">Maps a <see cref="T:System.Reflection.FieldInfo"/> to the name of the HDF5 member.</param>
            <param name="PropertyNameMapper">Maps a <see cref="T:System.Reflection.PropertyInfo"/> to the name of the HDF5 member.</param>
        </member>
        <member name="P:PureHDF.H5ReadOptions.IncludeStructFields">
            <summary>A value that indicates whether struct fields are handled during serialization. The default value is <see langword="true"/>.</summary>
        </member>
        <member name="P:PureHDF.H5ReadOptions.IncludeStructProperties">
            <summary>A value that indicates whether struct properties are handled during serialization. The default value is <see langword="false"/>.</summary>
        </member>
        <member name="P:PureHDF.H5ReadOptions.IncludeClassFields">
            <summary>A value that indicates whether class fields are handled during serialization. The default value is <see langword="false"/>.</summary>
        </member>
        <member name="P:PureHDF.H5ReadOptions.IncludeClassProperties">
            <summary>A value that indicates whether class properties are handled during serialization. The default value is <see langword="true"/>.</summary>
        </member>
        <member name="P:PureHDF.H5ReadOptions.FieldNameMapper">
            <summary>Maps a <see cref="T:System.Reflection.FieldInfo"/> to the name of the HDF5 member.</summary>
        </member>
        <member name="P:PureHDF.H5ReadOptions.PropertyNameMapper">
            <summary>Maps a <see cref="T:System.Reflection.PropertyInfo"/> to the name of the HDF5 member.</summary>
        </member>
        <member name="T:PureHDF.H5SourceGeneratorAttribute">
            <summary>
            Indicates that the attributed partial class should be extended with generated bindings for the specified file.
            </summary>
        </member>
        <member name="M:PureHDF.H5SourceGeneratorAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:PureHDF.H5SourceGeneratorAttribute"/> class.
            </summary>
            <param name="filePath">The path of the file to generate the bindings for.</param>
        </member>
        <member name="T:PureHDF.H5StringLengthAttribute">
            <summary>
            Specifies the fixed-length string length.
            </summary>
        </member>
        <member name="M:PureHDF.H5StringLengthAttribute.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:PureHDF.H5StringLengthAttribute"/> class.
            </summary>
            <param name="length">The desired fixed-length string length.</param>
        </member>
        <member name="P:PureHDF.H5StringLengthAttribute.Length">
            <summary>
            Gets the name of the member.
            </summary>
        </member>
        <member name="T:PureHDF.IDatasetStream">
            <summary>
            Contains a collection of optional methods to improve performance.
            </summary>
        </member>
        <member name="M:PureHDF.IDatasetStream.ReadDataset(System.Span{System.Byte})">
            <summary>
            This method is called to indicate that actual data is being read (e.g. to determine if the request should be cached).
            </summary>
            <param name="buffer">The buffer to write the data into.</param>
        </member>
        <member name="T:PureHDF.IH5AttributableObject">
            <summary>
            A base class for types that can hold HDF5 attributes.
            </summary>
        </member>
        <member name="M:PureHDF.IH5AttributableObject.Attributes">
            <summary>
            Gets an enumerable of the available attributes.
            </summary>
        </member>
        <member name="M:PureHDF.IH5AttributableObject.AttributesAsync(System.Threading.CancellationToken)">
            <summary>
            Gets an enumerable of the available attributes.
            <param name="cancellationToken">A token to cancel the current operation.</param>
            </summary>
        </member>
        <member name="M:PureHDF.IH5AttributableObject.Attribute(System.String)">
            <summary>
            Checks if the attribute with the specified <paramref name="name"/> exist.
            </summary>
            <param name="name">The name of the attribute.</param>
            <returns>A boolean which indicates if the attribute exists.</returns>
        </member>
        <member name="M:PureHDF.IH5AttributableObject.AttributeAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if the attribute with the specified <paramref name="name"/> exist.
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="cancellationToken">A token to cancel the current operation.</param>
            <returns>A boolean which indicates if the attribute exists.</returns>
        </member>
        <member name="M:PureHDF.IH5AttributableObject.AttributeExists(System.String)">
            <summary>
            Gets the attribute named <paramref name="name"/>.
            </summary>
            <param name="name">The name of the attribute.</param>
            <returns>The requested attribute.</returns>
        </member>
        <member name="M:PureHDF.IH5AttributableObject.AttributeExistsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the attribute named <paramref name="name"/>.
            </summary>
            <param name="name">The name of the attribute.</param>
            <param name="cancellationToken">A token to cancel the current operation.</param>
            <returns>The requested attribute.</returns>
        </member>
        <member name="T:PureHDF.IH5Attribute">
            <summary>
            An HDF5 attribute.
            </summary>
        </member>
        <member name="P:PureHDF.IH5Attribute.Name">
            <summary>
            Gets the attribute name.
            </summary>
        </member>
        <member name="P:PureHDF.IH5Attribute.Space">
            <summary>
            Gets the data space.
            </summary>
        </member>
        <member name="P:PureHDF.IH5Attribute.Type">
            <summary>
            Gets the data type.
            </summary>
        </member>
        <member name="M:PureHDF.IH5Attribute.Read``1(System.UInt64[])">
            <summary>
            Reads the data.
            </summary>
            <typeparam name="T">The type of the data to read.</typeparam>
            <param name="memoryDims">The dimensions of the resulting buffer.</param>
            <returns>The read data of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:PureHDF.IH5Attribute.Read``1(``0,System.UInt64[])">
            <summary>
            Reads the data into the provided buffer.
            </summary>
            <typeparam name="T">The type of the data to read.</typeparam>
            <param name="buffer">The buffer to read the data into.</param>
            <param name="memoryDims">The dimensions of the resulting buffer.</param>
        </member>
        <member name="T:PureHDF.IH5CommitedDatatype">
            <summary>
            An HDF5 commited data type (also known as transient, shareable or named data type).
            </summary>
        </member>
        <member name="T:PureHDF.IH5DataLayout">
            <summary>
            An HDF5 data layout.
            </summary>
        </member>
        <member name="P:PureHDF.IH5DataLayout.Class">
            <summary>
            Gets the data layout class.
            </summary>
        </member>
        <member name="P:PureHDF.IH5DataLayout.Chunks">
            <summary>
            Gets the chunk dimensions.
            </summary>
        </member>
        <member name="T:PureHDF.IH5Dataset">
            <summary>
            An HDF5 dataset.
            </summary>
        </member>
        <member name="P:PureHDF.IH5Dataset.Space">
            <summary>
            Gets the data space.
            </summary>
        </member>
        <member name="P:PureHDF.IH5Dataset.Type">
            <summary>
            Gets the data type.
            </summary>
        </member>
        <member name="P:PureHDF.IH5Dataset.Layout">
            <summary>
            Gets the data layout.
            </summary>
        </member>
        <member name="P:PureHDF.IH5Dataset.FillValue">
            <summary>
            Gets the fill value.
            </summary>
        </member>
        <member name="M:PureHDF.IH5Dataset.Read``1(PureHDF.Selections.Selection,PureHDF.Selections.Selection,System.UInt64[])">
            <summary>
            Reads the data.
            </summary>
            <typeparam name="T">The type of the data to read.</typeparam>
            <param name="fileSelection">The selection within the source HDF5 dataset.</param>
            <param name="memorySelection">The selection within the destination memory.</param>
            <param name="memoryDims">The dimensions of the destination memory buffer.</param>
            <returns>The read data as array of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:PureHDF.IH5Dataset.Read``1(``0,PureHDF.Selections.Selection,PureHDF.Selections.Selection,System.UInt64[])">
            <summary>
            Reads the data into the provided buffer.
            </summary>
            <typeparam name="T">The type of the data to read.</typeparam>
            <param name="buffer">The buffer to read the data into.</param>
            <param name="fileSelection">The selection within the source HDF5 dataset.</param>
            <param name="memorySelection">The selection within the destination memory.</param>
            <param name="memoryDims">The dimensions of the destination memory buffer.</param>
        </member>
        <member name="M:PureHDF.IH5Dataset.ReadAsync``1(PureHDF.Selections.Selection,PureHDF.Selections.Selection,System.UInt64[],System.Threading.CancellationToken)">
            <summary>
            Reads the data asynchronously. More information: <seealso href="https://github.com/Apollo3zehn/PureHDF#8-asynchronous-data-access-net-6">PureHDF</seealso>.
            </summary>
            <typeparam name="T">The type of the data to read.</typeparam>
            <param name="fileSelection">The selection within the source HDF5 dataset.</param>
            <param name="memorySelection">The selection within the target memory.</param>
            <param name="memoryDims">The dimensions of the target memory buffer.</param>
            <param name="cancellationToken">A token to cancel the current operation.</param>
            <returns>A task which returns the read data as array of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:PureHDF.IH5Dataset.ReadAsync``1(``0,PureHDF.Selections.Selection,PureHDF.Selections.Selection,System.UInt64[],System.Threading.CancellationToken)">
            <summary>
            Reads the data asynchronously into the provided buffer. More information: <seealso href="https://github.com/Apollo3zehn/PureHDF#8-asynchronous-data-access-net-6">PureHDF</seealso>.
            </summary>
            <typeparam name="T">The type of the data to read.</typeparam>
            <param name="buffer">The buffer to read the data into.</param>
            <param name="fileSelection">The selection within the source HDF5 dataset.</param>
            <param name="memorySelection">The selection within the target memory.</param>
            <param name="memoryDims">The dimensions of the target memory buffer.</param>
            <param name="cancellationToken">A token to cancel the current operation.</param>
        </member>
        <member name="T:PureHDF.IH5Dataspace">
            <summary>
            An HDF5 dataspace.
            </summary>
        </member>
        <member name="P:PureHDF.IH5Dataspace.Rank">
            <summary>
            Gets the dataspace rank.
            </summary>
        </member>
        <member name="P:PureHDF.IH5Dataspace.Type">
            <summary>
            Gets the dataspace type.
            </summary>
        </member>
        <member name="P:PureHDF.IH5Dataspace.Dimensions">
            <summary>
            Gets the dataspace dimensions.
            </summary>
        </member>
        <member name="P:PureHDF.IH5Dataspace.MaxDimensions">
            <summary>
            Gets the maximum dataspace dimensions.
            </summary>
        </member>
        <member name="T:PureHDF.IFixedPointType">
            <summary>
            The fixed-point data type.
            </summary>
        </member>
        <member name="P:PureHDF.IFixedPointType.IsSigned">
            <summary>
            Gets a boolean which indicates if the data type is signed.
            </summary>
        </member>
        <member name="T:PureHDF.IFloatingPointType">
            <summary>
            The floating-point data type.
            </summary>
        </member>
        <member name="T:PureHDF.IStringType">
            <summary>
            The string data type.
            </summary>
        </member>
        <member name="T:PureHDF.IBitFieldType">
            <summary>
            The bitfield data type.
            </summary>
        </member>
        <member name="T:PureHDF.IOpaqueType">
            <summary>
            The opaque data type.
            </summary>
        </member>
        <member name="P:PureHDF.IOpaqueType.Tag">
            <summary>
            Gets a description for the opaque type.
            </summary>
        </member>
        <member name="T:PureHDF.CompoundMember">
            <summary>
            A compound member.
            </summary>
            <param name="Name">The member name.</param>
            <param name="Offset">The offset of the member in the parent compound data type.</param>
            <param name="Type">The member data type.</param>
        </member>
        <member name="M:PureHDF.CompoundMember.#ctor(System.String,System.Int32,PureHDF.IH5DataType)">
            <summary>
            A compound member.
            </summary>
            <param name="Name">The member name.</param>
            <param name="Offset">The offset of the member in the parent compound data type.</param>
            <param name="Type">The member data type.</param>
        </member>
        <member name="P:PureHDF.CompoundMember.Name">
            <summary>The member name.</summary>
        </member>
        <member name="P:PureHDF.CompoundMember.Offset">
            <summary>The offset of the member in the parent compound data type.</summary>
        </member>
        <member name="P:PureHDF.CompoundMember.Type">
            <summary>The member data type.</summary>
        </member>
        <member name="T:PureHDF.ICompoundType">
            <summary>
            The compound data type.
            </summary>
        </member>
        <member name="P:PureHDF.ICompoundType.Members">
            <summary>
            Gets an array of members.
            </summary>
        </member>
        <member name="T:PureHDF.IReferenceType">
            <summary>
            The reference data type.
            </summary>
        </member>
        <member name="T:PureHDF.IEnumerationType">
            <summary>
            The enumeration data type.
            </summary>
        </member>
        <member name="T:PureHDF.IVariableLengthType">
            <summary>
            The variable-length data type.
            </summary>
        </member>
        <member name="T:PureHDF.IArrayType">
            <summary>
            The array data type.
            </summary>
        </member>
        <member name="P:PureHDF.IArrayType.BaseType">
            <summary>
            Gets the base data type.
            </summary>
        </member>
        <member name="T:PureHDF.IH5DataType">
            <summary>
            An HDF5 data type.
            </summary>
        </member>
        <member name="P:PureHDF.IH5DataType.Class">
            <summary>
            Gets the data type class.
            </summary>
        </member>
        <member name="P:PureHDF.IH5DataType.Size">
            <summary>
            Gets the size of the data type in bytes.
            </summary>
        </member>
        <member name="P:PureHDF.IH5DataType.FixedPoint">
            <summary>
            Gets the fixed-point data type.
            </summary>        
        </member>
        <member name="P:PureHDF.IH5DataType.FloatingPoint">
            <summary>
            Gets the floating-point data type.
            </summary>
        </member>
        <member name="P:PureHDF.IH5DataType.String">
            <summary>
            Gets the string data type.
            </summary>
        </member>
        <member name="P:PureHDF.IH5DataType.BitField">
            <summary>
            Gets the bitfield data type.
            </summary>
        </member>
        <member name="P:PureHDF.IH5DataType.Opaque">
            <summary>
            Gets the opaque data type.
            </summary>
        </member>
        <member name="P:PureHDF.IH5DataType.Compound">
            <summary>
            Gets the compound data type.
            </summary>
        </member>
        <member name="P:PureHDF.IH5DataType.Reference">
            <summary>
            Gets the reference data type.
            </summary>
        </member>
        <member name="P:PureHDF.IH5DataType.Enumeration">
            <summary>
            Gets the enumeration data type.
            </summary>
        </member>
        <member name="P:PureHDF.IH5DataType.VariableLength">
            <summary>
            Gets the variable-length data type.
            </summary>
        </member>
        <member name="P:PureHDF.IH5DataType.Array">
            <summary>
            Gets the array data type.
            </summary>
        </member>
        <member name="T:PureHDF.IH5FillValue">
            <summary>
            An HDF5 fill value.
            </summary>
        </member>
        <member name="P:PureHDF.IH5FillValue.Value">
            <summary>
            Gets the raw fill value as array of <see cref="T:System.Byte"/>.
            </summary>
        </member>
        <member name="M:PureHDF.IH5FillValue.GetValue``1">
            <summary>
            Gets the fill value as value of type <typeparamref name="T"/>. The type parameter <typeparamref name="T"/> must match the <see langword="unmanaged" /> constraint.
            </summary>
        </member>
        <member name="T:PureHDF.IH5Group">
            <summary>
            An HDF5 group.
            </summary>
        </member>
        <member name="M:PureHDF.IH5Group.LinkExists(System.String)">
            <summary>
            Checks if the link with the specified <paramref name="path"/> exist.
            </summary>
            <param name="path">The path of the link.</param>
            <returns>A boolean which indicates if the link exists.</returns>
        </member>
        <member name="M:PureHDF.IH5Group.LinkExistsAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Checks if the link with the specified <paramref name="path"/> exist.
            </summary>
            <param name="path">The path of the link.</param>
            <param name="cancellationToken">A token to cancel the current operation.</param>
            <returns>A boolean which indicates if the link exists.</returns>
        </member>
        <member name="M:PureHDF.IH5Group.Get(System.String)">
            <summary>
            Gets the object that is at the given <paramref name="path"/>.
            </summary>
            <param name="path">The path of the object.</param>
            <returns>The requested object.</returns>
        </member>
        <member name="M:PureHDF.IH5Group.GetAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the object that is at the given <paramref name="path"/>.
            </summary>
            <param name="path">The path of the object.</param>
            <param name="cancellationToken">A token to cancel the current operation.</param>
            <returns>The requested object.</returns>
        </member>
        <member name="M:PureHDF.IH5Group.Children">
            <summary>
            Gets an enumerable of the available children.
            </summary>
            <returns>An enumerable of the available children.</returns>
        </member>
        <member name="M:PureHDF.IH5Group.ChildrenAsync(System.Threading.CancellationToken)">
            <summary>
            Gets an enumerable of the available children.
            </summary>
            <param name="cancellationToken">A token to cancel the current operation.</param>
            <returns>An enumerable of the available children.</returns>
        </member>
        <member name="T:PureHDF.IH5GroupExtensions">
            <summary>
            Defines extensions methods for the <see cref="T:PureHDF.IH5Group" /> type.
            </summary>
        </member>
        <member name="M:PureHDF.IH5GroupExtensions.Get``1(PureHDF.IH5Group,System.String)">
            <summary>
            Gets the object that is at the given <paramref name="path"/>.
            </summary>
            <typeparam name="T">The return type of the object.</typeparam>
            <param name="group">The group to operate on.</param>
            <param name="path">The path of the object.</param>
            <returns>The requested object.</returns>
        </member>
        <member name="M:PureHDF.IH5GroupExtensions.GetAsync``1(PureHDF.IH5Group,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the object that is at the given <paramref name="path"/>.
            </summary>
            <typeparam name="T">The return type of the object.</typeparam>
            <param name="group">The group to operate on.</param>
            <param name="path">The path of the object.</param>
            <param name="cancellationToken">A token to cancel the current operation.</param>
            <returns>The requested object.</returns>
        </member>
        <member name="M:PureHDF.IH5GroupExtensions.Group(PureHDF.IH5Group,System.String)">
            <summary>
            Gets the group that is at the given <paramref name="path"/>.
            </summary>
            <param name="group">The group to operate on.</param>
            <param name="path">The path of the object.</param>
            <returns>The requested group.</returns>
        </member>
        <member name="M:PureHDF.IH5GroupExtensions.GroupAsync(PureHDF.IH5Group,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the group that is at the given <paramref name="path"/>.
            </summary>
            <param name="group">The group to operate on.</param>
            <param name="path">The path of the object.</param>
            <param name="cancellationToken">A token to cancel the current operation.</param>
            <returns>The requested group.</returns>
        </member>
        <member name="M:PureHDF.IH5GroupExtensions.Dataset(PureHDF.IH5Group,System.String)">
            <summary>
            Gets the dataset that is at the given <paramref name="path"/>.
            </summary>
            <param name="group">The group to operate on.</param>
            <param name="path">The path of the object.</param>
            <returns>The requested dataset.</returns>
        </member>
        <member name="M:PureHDF.IH5GroupExtensions.DatasetAsync(PureHDF.IH5Group,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the dataset that is at the given <paramref name="path"/>.
            </summary>
            <param name="group">The group to operate on.</param>
            <param name="path">The path of the object.</param>
            <param name="cancellationToken">A token to cancel the current operation.</param>
            <returns>The requested dataset.</returns>
        </member>
        <member name="M:PureHDF.IH5GroupExtensions.CommitedDatatype(PureHDF.IH5Group,System.String)">
            <summary>
            Gets the commited data type that is at the given <paramref name="path"/>.
            </summary>
            <param name="group">The group to operate on.</param>
            <param name="path">The path of the object.</param>
            <returns>The requested commited data type.</returns>
        </member>
        <member name="M:PureHDF.IH5GroupExtensions.CommitedDatatypeAsync(PureHDF.IH5Group,System.String,System.Threading.CancellationToken)">
            <summary>
            Gets the commited data type that is at the given <paramref name="path"/>.
            </summary>
            <param name="group">The group to operate on.</param>
            <param name="path">The path of the object.</param>
            <param name="cancellationToken">A token to cancel the current operation.</param>
            <returns>The requested commited data type.</returns>
        </member>
        <member name="T:PureHDF.IH5Object">
            <summary>
            A base class HDF5 objects.
            </summary>
        </member>
        <member name="P:PureHDF.IH5Object.Name">
            <summary>
            Gets the name.
            </summary>
        </member>
        <member name="T:PureHDF.IH5UnresolvedLink">
            <summary>
            An HDF5 link that could not be resolved.
            </summary>
        </member>
        <member name="P:PureHDF.IH5UnresolvedLink.Name">
            <summary>
            Gets the link name.
            </summary>
        </member>
        <member name="P:PureHDF.IH5UnresolvedLink.Reason">
            <summary>
            Gets an exception that indicates the reason why the link could not be resolved.
            </summary>
        </member>
        <member name="T:PureHDF.H5AttributableObject">
            <summary>
            A base class for attributable objects.
            </summary>
        </member>
        <member name="P:PureHDF.H5AttributableObject.Attributes">
            <summary>
            A map of attributes that belong to this object.
            </summary>
        </member>
        <member name="T:PureHDF.H5Attribute">
            <summary>
            An attribute.
            </summary>
        </member>
        <member name="M:PureHDF.H5Attribute.#ctor(System.Object,System.UInt64[])">
            <summary>
            Initializes a new instance of the <see cref="T:PureHDF.H5Attribute"/> class.
            </summary>
            <param name="data">The attribute data.</param>
            <param name="dimensions">The attribute dimensions.</param>
        </member>
        <member name="T:PureHDF.H5Dataset">
            <summary>
            A dataset.
            </summary>
        </member>
        <member name="M:PureHDF.H5Dataset.#ctor(System.Object,System.UInt32[],PureHDF.Selections.Selection,PureHDF.Selections.Selection,System.UInt64[],PureHDF.VOL.Native.H5DatasetCreation)">
            <summary>
            Initializes a new instance of the <see cref="T:PureHDF.H5Dataset"/> class.
            </summary>
            <param name="data">The dataset data.</param>
            <param name="chunks">The dataset's chunk dimensions.</param>
            <param name="memorySelection">The memory selection.</param>
            <param name="fileSelection">The file selection.</param>
            <param name="fileDims">The dimensions of the dataset when written to the file.</param>
            <param name="datasetCreation">The dataset creation properties.</param>
        </member>
        <member name="T:PureHDF.H5Dataset`1">
            <summary>
            A dataset.
            </summary>
            <typeparam name="T">The type of the data.</typeparam>
        </member>
        <member name="M:PureHDF.H5Dataset`1.#ctor(System.UInt64[],System.UInt32[],PureHDF.VOL.Native.H5DatasetCreation)">
            <summary>
            Initializes a new instance of the <see cref="T:PureHDF.H5Dataset"/> class.
            </summary>
            <param name="fileDims">The dimensions of the dataset when written to the file.</param>
            <param name="chunks">The dataset's chunk dimensions.</param>
            <param name="datasetCreation">The dataset creation properties.</param>
        </member>
        <member name="T:PureHDF.H5NullDataset`1">
            <summary>
            A null space dataset.
            </summary>
            <typeparam name="T">The type of the data.</typeparam>
        </member>
        <member name="M:PureHDF.H5NullDataset`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PureHDF.H5NullDataset`1"/> class.
            </summary>
        </member>
        <member name="T:PureHDF.H5Group">
            <summary>
            A group.
            </summary>
        </member>
        <member name="P:PureHDF.H5Group.Item(System.String)">
            <inheritdoc />
        </member>
        <member name="P:PureHDF.H5Group.Keys">
            <inheritdoc />
        </member>
        <member name="P:PureHDF.H5Group.Values">
            <inheritdoc />
        </member>
        <member name="P:PureHDF.H5Group.Count">
            <inheritdoc />
        </member>
        <member name="P:PureHDF.H5Group.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.H5Group.Add(System.String,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.H5Group.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.H5Group.Clear">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.H5Group.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.H5Group.ContainsKey(System.String)">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.H5Group.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.H5Group.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.H5Group.Remove(System.String)">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.H5Group.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.H5Group.TryGetValue(System.String,System.Object@)">
            <inheritdoc />
        </member>
        <member name="T:PureHDF.H5Object">
            <summary>
            A base class for HDF5 objects.
            </summary>
        </member>
        <member name="T:PureHDF.H5WriteOptions">
            <summary>
            Provides options to be used with <see cref="T:PureHDF.H5File"/>.
            </summary>
            <param name="DefaultStringLength">A value that indicates how strings are handled during serialization. A nonzero positve value means that strings are treated as fixed-length strings, otherwise they are variable-length strings. The default value is 0.</param>
            <param name="GlobalHeapCollectionSize">A value that indicates the size of a global heap collection in bytes. The default value is 4096 bytes which is the minimum allowed size.</param>
            <param name="GlobalHeapFlushThreshold">A value that indicates the threshold after which global heap collections will be flushed. The default value is 4096 * 1024 = 4 MB.</param>
            <param name="PreferCompactDatasetLayout">A value that indicates whether the writer tries to use the compact layout for datasets if the total data size is &lt; 64 kB and it should not be chunked.</param>
            <param name="IncludeStructFields">A value that indicates whether struct fields are handled during serialization. The default value is <see langword="true"/>.</param>
            <param name="IncludeStructProperties">A value that indicates whether struct properties are handled during serialization. The default value is <see langword="false"/>.</param>
            <param name="IncludeClassFields">A value that indicates whether class fields are handled during serialization. The default value is <see langword="false"/>.</param>
            <param name="IncludeClassProperties">A value that indicates whether class properties are handled during serialization. The default value is <see langword="true"/>.</param>
            <param name="FieldNameMapper">Maps a <see cref="T:System.Reflection.FieldInfo"/> to the name of the HDF5 member.</param>
            <param name="FieldStringLengthMapper">Maps a <see cref="T:System.Reflection.FieldInfo"/> of type string to the desired string length.</param>
            <param name="PropertyNameMapper">Maps a <see cref="T:System.Reflection.PropertyInfo"/> to the name of the HDF5 member.</param>
            <param name="PropertyStringLengthMapper">Maps a <see cref="T:System.Reflection.PropertyInfo"/> of type string to the desired string length.</param>
            <param name="Filters">A list of filters and their options to be applied to datasets that have no explicit filters assigned.</param>
        </member>
        <member name="M:PureHDF.H5WriteOptions.#ctor(System.Int32,System.Int32,System.Int64,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Func{System.Reflection.FieldInfo,System.String},System.Func{System.Reflection.FieldInfo,System.Nullable{System.Int32}},System.Func{System.Reflection.PropertyInfo,System.String},System.Func{System.Reflection.PropertyInfo,System.Nullable{System.Int32}},System.Collections.Generic.List{PureHDF.Filters.H5Filter})">
            <summary>
            Provides options to be used with <see cref="T:PureHDF.H5File"/>.
            </summary>
            <param name="DefaultStringLength">A value that indicates how strings are handled during serialization. A nonzero positve value means that strings are treated as fixed-length strings, otherwise they are variable-length strings. The default value is 0.</param>
            <param name="GlobalHeapCollectionSize">A value that indicates the size of a global heap collection in bytes. The default value is 4096 bytes which is the minimum allowed size.</param>
            <param name="GlobalHeapFlushThreshold">A value that indicates the threshold after which global heap collections will be flushed. The default value is 4096 * 1024 = 4 MB.</param>
            <param name="PreferCompactDatasetLayout">A value that indicates whether the writer tries to use the compact layout for datasets if the total data size is &lt; 64 kB and it should not be chunked.</param>
            <param name="IncludeStructFields">A value that indicates whether struct fields are handled during serialization. The default value is <see langword="true"/>.</param>
            <param name="IncludeStructProperties">A value that indicates whether struct properties are handled during serialization. The default value is <see langword="false"/>.</param>
            <param name="IncludeClassFields">A value that indicates whether class fields are handled during serialization. The default value is <see langword="false"/>.</param>
            <param name="IncludeClassProperties">A value that indicates whether class properties are handled during serialization. The default value is <see langword="true"/>.</param>
            <param name="FieldNameMapper">Maps a <see cref="T:System.Reflection.FieldInfo"/> to the name of the HDF5 member.</param>
            <param name="FieldStringLengthMapper">Maps a <see cref="T:System.Reflection.FieldInfo"/> of type string to the desired string length.</param>
            <param name="PropertyNameMapper">Maps a <see cref="T:System.Reflection.PropertyInfo"/> to the name of the HDF5 member.</param>
            <param name="PropertyStringLengthMapper">Maps a <see cref="T:System.Reflection.PropertyInfo"/> of type string to the desired string length.</param>
            <param name="Filters">A list of filters and their options to be applied to datasets that have no explicit filters assigned.</param>
        </member>
        <member name="P:PureHDF.H5WriteOptions.DefaultStringLength">
            <summary>A value that indicates how strings are handled during serialization. A nonzero positve value means that strings are treated as fixed-length strings, otherwise they are variable-length strings. The default value is 0.</summary>
        </member>
        <member name="P:PureHDF.H5WriteOptions.GlobalHeapCollectionSize">
            <summary>A value that indicates the size of a global heap collection in bytes. The default value is 4096 bytes which is the minimum allowed size.</summary>
        </member>
        <member name="P:PureHDF.H5WriteOptions.GlobalHeapFlushThreshold">
            <summary>A value that indicates the threshold after which global heap collections will be flushed. The default value is 4096 * 1024 = 4 MB.</summary>
        </member>
        <member name="P:PureHDF.H5WriteOptions.PreferCompactDatasetLayout">
            <summary>A value that indicates whether the writer tries to use the compact layout for datasets if the total data size is &lt; 64 kB and it should not be chunked.</summary>
        </member>
        <member name="P:PureHDF.H5WriteOptions.IncludeStructFields">
            <summary>A value that indicates whether struct fields are handled during serialization. The default value is <see langword="true"/>.</summary>
        </member>
        <member name="P:PureHDF.H5WriteOptions.IncludeStructProperties">
            <summary>A value that indicates whether struct properties are handled during serialization. The default value is <see langword="false"/>.</summary>
        </member>
        <member name="P:PureHDF.H5WriteOptions.IncludeClassFields">
            <summary>A value that indicates whether class fields are handled during serialization. The default value is <see langword="false"/>.</summary>
        </member>
        <member name="P:PureHDF.H5WriteOptions.IncludeClassProperties">
            <summary>A value that indicates whether class properties are handled during serialization. The default value is <see langword="true"/>.</summary>
        </member>
        <member name="P:PureHDF.H5WriteOptions.FieldNameMapper">
            <summary>Maps a <see cref="T:System.Reflection.FieldInfo"/> to the name of the HDF5 member.</summary>
        </member>
        <member name="P:PureHDF.H5WriteOptions.FieldStringLengthMapper">
            <summary>Maps a <see cref="T:System.Reflection.FieldInfo"/> of type string to the desired string length.</summary>
        </member>
        <member name="P:PureHDF.H5WriteOptions.PropertyNameMapper">
            <summary>Maps a <see cref="T:System.Reflection.PropertyInfo"/> to the name of the HDF5 member.</summary>
        </member>
        <member name="P:PureHDF.H5WriteOptions.PropertyStringLengthMapper">
            <summary>Maps a <see cref="T:System.Reflection.PropertyInfo"/> of type string to the desired string length.</summary>
        </member>
        <member name="P:PureHDF.H5WriteOptions.Filters">
            <summary>A list of filters and their options to be applied to datasets that have no explicit filters assigned.</summary>
        </member>
        <member name="T:PureHDF.Filters.FilterInfo">
            <summary>
            A delegate which describes a filter function.
            </summary>
            <param name="Flags">The filter flags.</param>
            <param name="Parameters">The filter parameters.</param>
            <param name="ChunkSize">The chunk size.</param>
            <param name="Buffer">The source buffer.</param>
            <returns>The target buffer.</returns>
        </member>
        <member name="M:PureHDF.Filters.FilterInfo.#ctor(PureHDF.Filters.H5FilterFlags,System.UInt32[],System.Int32,System.Memory{System.Byte})">
            <summary>
            A delegate which describes a filter function.
            </summary>
            <param name="Flags">The filter flags.</param>
            <param name="Parameters">The filter parameters.</param>
            <param name="ChunkSize">The chunk size.</param>
            <param name="Buffer">The source buffer.</param>
            <returns>The target buffer.</returns>
        </member>
        <member name="P:PureHDF.Filters.FilterInfo.Flags">
            <summary>The filter flags.</summary>
        </member>
        <member name="P:PureHDF.Filters.FilterInfo.Parameters">
            <summary>The filter parameters.</summary>
        </member>
        <member name="P:PureHDF.Filters.FilterInfo.ChunkSize">
            <summary>The chunk size.</summary>
        </member>
        <member name="P:PureHDF.Filters.FilterInfo.Buffer">
            <summary>The source buffer.</summary>
        </member>
        <member name="T:PureHDF.Filters.H5Filter">
            <summary>
            A filter with associated options.
            </summary>
            <param name="Id">The filter identifier.</param>
            <param name="Options">Optional filter options.</param>
        </member>
        <member name="M:PureHDF.Filters.H5Filter.#ctor(System.UInt16,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            A filter with associated options.
            </summary>
            <param name="Id">The filter identifier.</param>
            <param name="Options">Optional filter options.</param>
        </member>
        <member name="P:PureHDF.Filters.H5Filter.Id">
            <summary>The filter identifier.</summary>
        </member>
        <member name="P:PureHDF.Filters.H5Filter.Options">
            <summary>Optional filter options.</summary>
        </member>
        <member name="M:PureHDF.Filters.H5Filter.op_Implicit(System.UInt16)~PureHDF.Filters.H5Filter">
            <summary>
            Converts a filter identifier into a <see cref="T:PureHDF.Filters.H5Filter"/> instance with default filter options.
            </summary>
            <param name="filterId"></param>
        </member>
        <member name="M:PureHDF.Filters.H5Filter.Register(PureHDF.Filters.IH5Filter)">
            <summary>
            Registers a new filter.
            </summary>
            <param name="filter">The filter.</param>
        </member>
        <member name="M:PureHDF.Filters.H5Filter.ResetRegistrations">
            <summary>
            Restores the default list of filter registrations.
            </summary>
        </member>
        <member name="T:PureHDF.Filters.ShuffleFilter">
            <summary>
            Hardware-accelerated Shuffle filter.
            </summary>
        </member>
        <member name="F:PureHDF.Filters.ShuffleFilter.Id">
            <summary>
            The Shuffle filter identifier.
            </summary>
        </member>
        <member name="P:PureHDF.Filters.ShuffleFilter.FilterId">
            <inheritdoc />
        </member>
        <member name="P:PureHDF.Filters.ShuffleFilter.Name">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.Filters.ShuffleFilter.Filter(PureHDF.Filters.FilterInfo)">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.Filters.ShuffleFilter.GetParameters(System.UInt32[],System.UInt32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="T:PureHDF.Filters.Fletcher32Filter">
            <summary>
            Fletcher-32 checksum filter.
            </summary>
        </member>
        <member name="F:PureHDF.Filters.Fletcher32Filter.Id">
            <summary>
            The Fletcher-32 filter identifier.
            </summary>
        </member>
        <member name="P:PureHDF.Filters.Fletcher32Filter.FilterId">
            <inheritdoc />
        </member>
        <member name="P:PureHDF.Filters.Fletcher32Filter.Name">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.Filters.Fletcher32Filter.Filter(PureHDF.Filters.FilterInfo)">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.Filters.Fletcher32Filter.GetParameters(System.UInt32[],System.UInt32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="T:PureHDF.Filters.NbitFilter">
            <summary>
            N-Bit filter.
            </summary>
        </member>
        <member name="F:PureHDF.Filters.NbitFilter.Id">
            <summary>
            The N-Bit filter identifier.
            </summary>
        </member>
        <member name="P:PureHDF.Filters.NbitFilter.FilterId">
            <inheritdoc />
        </member>
        <member name="P:PureHDF.Filters.NbitFilter.Name">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.Filters.NbitFilter.Filter(PureHDF.Filters.FilterInfo)">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.Filters.NbitFilter.GetParameters(System.UInt32[],System.UInt32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="T:PureHDF.Filters.ScaleOffsetFilter">
            <summary>
            Scale-Offset filter.
            </summary>
        </member>
        <member name="F:PureHDF.Filters.ScaleOffsetFilter.Id">
            <summary>
            The Scale-Offset identifier.
            </summary>
        </member>
        <member name="P:PureHDF.Filters.ScaleOffsetFilter.FilterId">
            <inheritdoc />
        </member>
        <member name="P:PureHDF.Filters.ScaleOffsetFilter.Name">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.Filters.ScaleOffsetFilter.Filter(PureHDF.Filters.FilterInfo)">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.Filters.ScaleOffsetFilter.GetParameters(System.UInt32[],System.UInt32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="T:PureHDF.Filters.DeflateFilter">
            <summary>
            Deflate filter based on <see cref="T:System.IO.Compression.DeflateStream"/>.
            </summary>
        </member>
        <member name="F:PureHDF.Filters.DeflateFilter.COMPRESSION_LEVEL">
            <summary>
            The compression level options key. The compression level must be one of [-1, 0, 1, 9] and the default is -1.
            </summary>
        </member>
        <member name="F:PureHDF.Filters.DeflateFilter.Id">
            <summary>
            The Deflate filter identifier.
            </summary>
        </member>
        <member name="P:PureHDF.Filters.DeflateFilter.FilterId">
            <inheritdoc />
        </member>
        <member name="P:PureHDF.Filters.DeflateFilter.Name">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.Filters.DeflateFilter.Filter(PureHDF.Filters.FilterInfo)">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.Filters.DeflateFilter.GetParameters(System.UInt32[],System.UInt32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <inheritdoc />
        </member>
        <member name="T:PureHDF.Filters.H5FilterFlags">
            <summary>
            Specifies the filter flags.
            </summary>
        </member>
        <member name="F:PureHDF.Filters.H5FilterFlags.None">
            <summary>
            No filter flags.
            </summary>
        </member>
        <member name="F:PureHDF.Filters.H5FilterFlags.Decompress">
            <summary>
            A flag which indicates if the provided buffer should be decompressed.
            </summary>
        </member>
        <member name="F:PureHDF.Filters.H5FilterFlags.SkipEdc">
            <summary>
            A flag which indicates if EDC filters should be skipped.
            </summary>
        </member>
        <member name="T:PureHDF.Filters.IH5Filter">
            <summary>
            Represents an HDF5 filter.
            </summary>
        </member>
        <member name="P:PureHDF.Filters.IH5Filter.FilterId">
            <summary>
            The filter identifier.
            </summary>
        </member>
        <member name="P:PureHDF.Filters.IH5Filter.Name">
            <summary>
            The filter name.
            </summary>
        </member>
        <member name="M:PureHDF.Filters.IH5Filter.Filter(PureHDF.Filters.FilterInfo)">
            <summary>
            The filter function.
            </summary>
            <param name="info">Additional information for the filter process.</param>
            <returns>The filtered data.</returns>
        </member>
        <member name="M:PureHDF.Filters.IH5Filter.GetParameters(System.UInt32[],System.UInt32,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Returns the filter parameters being stored in the HDF5 file and which will be provided to the filter function. This method is only required for the PureHDF write API.
            </summary>
            <param name="chunkDimensions">The chunk dimensions.</param>
            <param name="typeSize">The size of the data type.</param>
            <param name="options">The user defined map of filter options.</param>
            <returns>The filter parameters.</returns>
        </member>
        <member name="T:PureHDF.Selections.AllSelection">
            <summary>
            This selection selects all elements in the dataset.
            </summary>
        </member>
        <member name="M:PureHDF.Selections.AllSelection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PureHDF.Selections.AllSelection"/> instance.
            </summary>
        </member>
        <member name="P:PureHDF.Selections.AllSelection.TotalElementCount">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.Selections.AllSelection.Walk(System.UInt64[])">
            <inheritdoc />
        </member>
        <member name="T:PureHDF.Selections.DelegateSelection">
            <summary>
            A selection which uses a delegate to get the information about how to walk through the data.
            </summary>
        </member>
        <member name="M:PureHDF.Selections.DelegateSelection.#ctor(System.UInt64,System.Func{System.UInt64[],System.Collections.Generic.IEnumerable{PureHDF.Selections.Step}})">
            <summary>
            Initializes a new instance of the <see cref="T:PureHDF.Selections.DelegateSelection"/> class.
            </summary>
            <param name="totalElementCount">The total number of elements which is used to preallocate the returned buffer.</param>
            <param name="walker">The user-defined walker delegate.</param>
        </member>
        <member name="P:PureHDF.Selections.DelegateSelection.TotalElementCount">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.Selections.DelegateSelection.Walk(System.UInt64[])">
            <inheritdoc />
        </member>
        <member name="T:PureHDF.Selections.HyperslabSelection">
            <summary>
            A regular hyperslab is a selection of elements from a hyper rectangle.
            </summary>
        </member>
        <member name="M:PureHDF.Selections.HyperslabSelection.#ctor(System.UInt64,System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:PureHDF.Selections.HyperslabSelection"/> instance of rank 1. Reference: <seealso href="https://docs.hdfgroup.org/hdf5/v1_10/group___h5_s.html#ga6adfdf1b95dc108a65bf66e97d38536d">hdfgroup.org</seealso>.
            </summary>
            <param name="start">The start coordinate of the block.</param>
            <param name="block">The block size.</param>
        </member>
        <member name="M:PureHDF.Selections.HyperslabSelection.#ctor(System.UInt64,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:PureHDF.Selections.HyperslabSelection"/> instance of rank 1. Reference: <seealso href="https://docs.hdfgroup.org/hdf5/v1_10/group___h5_s.html#ga6adfdf1b95dc108a65bf66e97d38536d">hdfgroup.org</seealso>.
            </summary>
            <param name="start">The start coordinate of the block.</param>
            <param name="stride">The number of elements to separate each block to be selected.</param>
            <param name="count">The number of blocks to select.</param>
            <param name="block">The block size.</param>
        </member>
        <member name="M:PureHDF.Selections.HyperslabSelection.#ctor(System.Int32,System.UInt64[],System.UInt64[])">
            <summary>
            Initializes a new instance of the <see cref="T:PureHDF.Selections.HyperslabSelection"/> instance of rank <paramref name="rank"/>. Reference: <seealso href="https://docs.hdfgroup.org/hdf5/v1_10/group___h5_s.html#ga6adfdf1b95dc108a65bf66e97d38536d">hdfgroup.org</seealso>.
            </summary>
            <param name="rank">The rank of the selection.</param>
            <param name="starts">The start coordinate of the block along each dimension.</param>
            <param name="blocks">The block size along each dimension.</param>
        </member>
        <member name="M:PureHDF.Selections.HyperslabSelection.#ctor(System.Int32,System.UInt64[],System.UInt64[],System.UInt64[],System.UInt64[])">
            <summary>
            Initializes a new instance of the <see cref="T:PureHDF.Selections.HyperslabSelection"/> instance of rank <paramref name="rank"/>. Reference: <seealso href="https://docs.hdfgroup.org/hdf5/v1_10/group___h5_s.html#ga6adfdf1b95dc108a65bf66e97d38536d">hdfgroup.org</seealso>.
            </summary>
            <param name="rank">The rank of the selection.</param>
            <param name="starts">The start coordinate of the block along each dimension.</param>
            <param name="strides">The number of elements to separate each block to be selected along each dimension.</param>
            <param name="counts">The number of blocks to select along each dimension.</param>
            <param name="blocks">The block size along each dimension.</param>
        </member>
        <member name="P:PureHDF.Selections.HyperslabSelection.Rank">
            <summary>
            Gets the rank of the selection.
            </summary>
        </member>
        <member name="P:PureHDF.Selections.HyperslabSelection.TotalElementCount">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.Selections.HyperslabSelection.Walk(System.UInt64[])">
            <inheritdoc />
        </member>
        <member name="T:PureHDF.Selections.IrregularHyperslabSelection">
            <summary>
            An irregular hyperslab is a selection of elements from a hyper rectangle.
            </summary>
        </member>
        <member name="P:PureHDF.Selections.IrregularHyperslabSelection.Rank">
            <summary>
            Gets the rank of the selection.
            </summary>
        </member>
        <member name="P:PureHDF.Selections.IrregularHyperslabSelection.TotalElementCount">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.Selections.IrregularHyperslabSelection.Walk(System.UInt64[])">
            <inheritdoc />
        </member>
        <member name="T:PureHDF.Selections.NoneSelection">
            <summary>
            This selection selects no elements in the dataset.
            </summary>
        </member>
        <member name="M:PureHDF.Selections.NoneSelection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PureHDF.Selections.NoneSelection"/> instance.
            </summary>
        </member>
        <member name="P:PureHDF.Selections.NoneSelection.TotalElementCount">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.Selections.NoneSelection.Walk(System.UInt64[])">
            <inheritdoc />
        </member>
        <member name="T:PureHDF.Selections.PointSelection">
            <summary>
            A selection which uses a collection of points to select the data.
            </summary>
        </member>
        <member name="M:PureHDF.Selections.PointSelection.#ctor(System.UInt64[0:,0:])">
            <summary>
            Initializes a new instance of the <see cref="T:PureHDF.Selections.PointSelection"/> class.
            </summary>
            <param name="points">The points to be selected.</param>
        </member>
        <member name="P:PureHDF.Selections.PointSelection.TotalElementCount">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.Selections.PointSelection.Walk(System.UInt64[])">
            <inheritdoc />
        </member>
        <member name="T:PureHDF.Selections.Selection">
            <summary>
            A base class which represents a selection.
            </summary>
        </member>
        <member name="P:PureHDF.Selections.Selection.TotalElementCount">
            <summary>
            Gets the total number of elements which is used to preallocate the returned buffer.
            </summary>
        </member>
        <member name="M:PureHDF.Selections.Selection.Walk(System.UInt64[])">
            <summary>
            The walk function is used to walk through the dataset and select the requested data.
            </summary>
            <param name="limits">The dataset dimensions.</param>
            <returns>An enumerable which provides a sequence of steps to select the requested data.</returns>
        </member>
        <member name="T:PureHDF.Selections.Step">
            <summary>
            Represents a single unit of data to be selected.
            </summary>
            <param name="Coordinates">The data coordinates.</param>
            <param name="ElementCount">The number of elements to select along the fastest changing dimension.</param>
        </member>
        <member name="M:PureHDF.Selections.Step.#ctor(System.UInt64[],System.UInt64)">
            <summary>
            Represents a single unit of data to be selected.
            </summary>
            <param name="Coordinates">The data coordinates.</param>
            <param name="ElementCount">The number of elements to select along the fastest changing dimension.</param>
        </member>
        <member name="P:PureHDF.Selections.Step.Coordinates">
            <summary>The data coordinates.</summary>
        </member>
        <member name="P:PureHDF.Selections.Step.ElementCount">
            <summary>The number of elements to select along the fastest changing dimension.</summary>
        </member>
        <member name="T:PureHDF.VOL.Native.ChunkCache">
            <summary>
            A static class to provide a default value for chunk cache factories.
            </summary>
        </member>
        <member name="P:PureHDF.VOL.Native.ChunkCache.DefaultReadingChunkCacheFactory">
            <summary>
            The default chunk cache factory for reading.
            </summary>
        </member>
        <member name="P:PureHDF.VOL.Native.ChunkCache.DefaultWritingChunkCacheFactory">
            <summary>
            The default chunk cache factory for writing.
            </summary>
        </member>
        <member name="T:PureHDF.VOL.Native.H5DatasetAccess">
            <summary>
            A structure which controls how the dataset is accessed. Reference: <seealso href="https://docs.hdfgroup.org/hdf5/v1_10/group___d_a_p_l.html">hdfgroup.org</seealso>
            </summary>
            <param name="ExternalFilePrefix">The external dataset storage file prefix. Reference: <seealso href="https://docs.hdfgroup.org/hdf5/v1_10/group___d_a_p_l.html#title11">hdfgroup.org</seealso>.</param>
            <param name="VirtualPrefix">The prefix to be applied to VDS source file paths. Reference: <seealso href="https://docs.hdfgroup.org/hdf5/v1_10/group___d_a_p_l.html#title12">hdfgroup.org</seealso>.</param>
            <param name="ChunkCache">The chunk cache used for reading. If <see langword="null"/>, the value of the <see cref="P:PureHDF.VOL.Native.ChunkCache.DefaultReadingChunkCacheFactory"/> property is used instead.</param>
        </member>
        <member name="M:PureHDF.VOL.Native.H5DatasetAccess.#ctor(System.String,System.String,PureHDF.VOL.Native.IReadingChunkCache)">
            <summary>
            A structure which controls how the dataset is accessed. Reference: <seealso href="https://docs.hdfgroup.org/hdf5/v1_10/group___d_a_p_l.html">hdfgroup.org</seealso>
            </summary>
            <param name="ExternalFilePrefix">The external dataset storage file prefix. Reference: <seealso href="https://docs.hdfgroup.org/hdf5/v1_10/group___d_a_p_l.html#title11">hdfgroup.org</seealso>.</param>
            <param name="VirtualPrefix">The prefix to be applied to VDS source file paths. Reference: <seealso href="https://docs.hdfgroup.org/hdf5/v1_10/group___d_a_p_l.html#title12">hdfgroup.org</seealso>.</param>
            <param name="ChunkCache">The chunk cache used for reading. If <see langword="null"/>, the value of the <see cref="P:PureHDF.VOL.Native.ChunkCache.DefaultReadingChunkCacheFactory"/> property is used instead.</param>
        </member>
        <member name="P:PureHDF.VOL.Native.H5DatasetAccess.ExternalFilePrefix">
            <summary>The external dataset storage file prefix. Reference: <seealso href="https://docs.hdfgroup.org/hdf5/v1_10/group___d_a_p_l.html#title11">hdfgroup.org</seealso>.</summary>
        </member>
        <member name="P:PureHDF.VOL.Native.H5DatasetAccess.VirtualPrefix">
            <summary>The prefix to be applied to VDS source file paths. Reference: <seealso href="https://docs.hdfgroup.org/hdf5/v1_10/group___d_a_p_l.html#title12">hdfgroup.org</seealso>.</summary>
        </member>
        <member name="P:PureHDF.VOL.Native.H5DatasetAccess.ChunkCache">
            <summary>The chunk cache used for reading. If <see langword="null"/>, the value of the <see cref="P:PureHDF.VOL.Native.ChunkCache.DefaultReadingChunkCacheFactory"/> property is used instead.</summary>
        </member>
        <member name="T:PureHDF.VOL.Native.H5LinkAccess">
            <summary>
            A structure which controls how the link is accessed. Reference: <seealso href="https://docs.hdfgroup.org/hdf5/v1_10/group___l_a_p_l.html">hdfgroup.org</seealso>.
            <param name="ExternalLinkPrefix">The prefix to be applied to external link paths. Reference: <seealso href="https://docs.hdfgroup.org/hdf5/v1_10/group___l_a_p_l.html#gafa5eced13ba3a00cdd65669626dc7294">hdfgroup.org</seealso>.</param>
            </summary>
        </member>
        <member name="M:PureHDF.VOL.Native.H5LinkAccess.#ctor(System.String)">
            <summary>
            A structure which controls how the link is accessed. Reference: <seealso href="https://docs.hdfgroup.org/hdf5/v1_10/group___l_a_p_l.html">hdfgroup.org</seealso>.
            <param name="ExternalLinkPrefix">The prefix to be applied to external link paths. Reference: <seealso href="https://docs.hdfgroup.org/hdf5/v1_10/group___l_a_p_l.html#gafa5eced13ba3a00cdd65669626dc7294">hdfgroup.org</seealso>.</param>
            </summary>
        </member>
        <member name="T:PureHDF.VOL.Native.IReadingChunkCache">
            <summary>
            Caches chunks during read operations.
            </summary>
        </member>
        <member name="M:PureHDF.VOL.Native.IReadingChunkCache.GetChunk(System.UInt64[],System.Func{System.Memory{System.Byte}})">
            <summary>
            Tries to get the chunk at the given position.
            </summary>
            <param name="indices">The chunk position.</param>
            <param name="chunkReader">The chunk reader is used whenever the chunk is not already cached.</param>
        </member>
        <member name="T:PureHDF.VOL.Native.NativeAttributableObject">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.VOL.Native.NativeAttributableObject.Attributes">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.VOL.Native.NativeAttributableObject.AttributesAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.VOL.Native.NativeAttributableObject.Attribute(System.String)">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.VOL.Native.NativeAttributableObject.AttributeAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.VOL.Native.NativeAttributableObject.AttributeExists(System.String)">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.VOL.Native.NativeAttributableObject.AttributeExistsAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:PureHDF.VOL.Native.NativeAttribute">
            <summary>
            A native HDF5 attribute.
            </summary>
        </member>
        <member name="P:PureHDF.VOL.Native.NativeAttribute.Name">
            <inheritdoc />
        </member>
        <member name="P:PureHDF.VOL.Native.NativeAttribute.Space">
            <inheritdoc />
        </member>
        <member name="P:PureHDF.VOL.Native.NativeAttribute.Type">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.VOL.Native.NativeAttribute.Read``1(System.UInt64[])">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.VOL.Native.NativeAttribute.Read``1(``0,System.UInt64[])">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.VOL.Native.NativeAttribute.Read``1(System.Span{``0},System.UInt64[])">
            <summary>
            Reads the data into the provided buffer.
            </summary>
            <typeparam name="T">The type of the data to read.</typeparam>
            <param name="buffer">The buffer to read the data into.</param>
            <param name="memoryDims">The dimensions of the destination memory buffer.</param>
        </member>
        <member name="T:PureHDF.VOL.Native.NativeDataset">
            <summary>
            A native HDF5 dataset.
            </summary>
        </member>
        <member name="P:PureHDF.VOL.Native.NativeDataset.Space">
            <inheritdoc />
        </member>
        <member name="P:PureHDF.VOL.Native.NativeDataset.Type">
            <inheritdoc />
        </member>
        <member name="P:PureHDF.VOL.Native.NativeDataset.Layout">
            <inheritdoc />
        </member>
        <member name="P:PureHDF.VOL.Native.NativeDataset.FillValue">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.VOL.Native.NativeDataset.Read``1(PureHDF.Selections.Selection,PureHDF.Selections.Selection,System.UInt64[])">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.VOL.Native.NativeDataset.Read``1(``0,PureHDF.Selections.Selection,PureHDF.Selections.Selection,System.UInt64[])">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.VOL.Native.NativeDataset.Read``1(PureHDF.Selections.Selection,PureHDF.Selections.Selection,System.UInt64[],PureHDF.VOL.Native.H5DatasetAccess)">
            <summary>
            Reads the data.
            </summary>
            <typeparam name="T">The type of the data to read.</typeparam>
            <param name="datasetAccess">The dataset access properties.</param>
            <param name="fileSelection">The selection within the source HDF5 dataset.</param>
            <param name="memorySelection">The selection within the destination memory.</param>
            <param name="memoryDims">The dimensions of the destination memory buffer.</param>
            <returns>The read data as array of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:PureHDF.VOL.Native.NativeDataset.Read``1(``0,PureHDF.Selections.Selection,PureHDF.Selections.Selection,System.UInt64[],PureHDF.VOL.Native.H5DatasetAccess)">
            <summary>
            Reads the data into the provided buffer.
            </summary>
            <typeparam name="T">The type of the data to read.</typeparam>
            <param name="buffer">The buffer to read the data into.</param>
            <param name="fileSelection">The selection within the source HDF5 dataset.</param>
            <param name="memorySelection">The selection within the destination memory.</param>
            <param name="memoryDims">The dimensions of the destination memory buffer.</param>
            <param name="datasetAccess">The dataset access properties.</param>
        </member>
        <member name="M:PureHDF.VOL.Native.NativeDataset.Read``1(System.Span{``0},PureHDF.Selections.Selection,PureHDF.Selections.Selection,System.UInt64[],PureHDF.VOL.Native.H5DatasetAccess)">
            <summary>
            Reads the data into the provided buffer.
            </summary>
            <typeparam name="T">The type of the data to read.</typeparam>
            <param name="buffer">The buffer to read the data into.</param>
            <param name="fileSelection">The selection within the source HDF5 dataset.</param>
            <param name="memorySelection">The selection within the destination memory.</param>
            <param name="memoryDims">The dimensions of the destination memory buffer.</param>
            <param name="datasetAccess">The dataset access properties.</param>
        </member>
        <member name="M:PureHDF.VOL.Native.NativeDataset.ReadAsync``1(PureHDF.Selections.Selection,PureHDF.Selections.Selection,System.UInt64[],System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.VOL.Native.NativeDataset.ReadAsync``1(``0,PureHDF.Selections.Selection,PureHDF.Selections.Selection,System.UInt64[],System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:PureHDF.VOL.Native.NativeFile">
            <summary>
            A native HDF5 file object. This is the entry-point to work with HDF5 files.
            </summary>
        </member>
        <member name="P:PureHDF.VOL.Native.NativeFile.Path">
            <summary>
            Gets the path of the opened HDF5 file if loaded from the file system.
            </summary>
        </member>
        <member name="M:PureHDF.VOL.Native.NativeFile.Get(PureHDF.VOL.Native.NativeRegionReference1)">
            <summary>
            Gets the file selection that is referenced by the given <paramref name="reference"/>.
            </summary>
            <param name="reference">The reference of the region.</param>
            <returns>The requested selection.</returns>
        </member>
        <member name="M:PureHDF.VOL.Native.NativeFile.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.VOL.Native.NativeFile.Dispose">
            <inheritdoc />
        </member>
        <member name="T:PureHDF.VOL.Native.NativeGroup">
            <summary>
            An HDF5 group.
            </summary>
        </member>
        <member name="M:PureHDF.VOL.Native.NativeGroup.LinkExists(System.String)">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.VOL.Native.NativeGroup.LinkExistsAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.VOL.Native.NativeGroup.LinkExists(System.String,PureHDF.VOL.Native.H5LinkAccess)">
            <summary>
            Checks if the link with the specified <paramref name="path"/> exist.
            </summary>
            <param name="path">The path of the link.</param>
            <param name="linkAccess">The link access properties.</param>
            <returns>A boolean which indicates if the link exists.</returns>
        </member>
        <member name="M:PureHDF.VOL.Native.NativeGroup.Get(System.String)">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.VOL.Native.NativeGroup.GetAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.VOL.Native.NativeGroup.Get(System.String,PureHDF.VOL.Native.H5LinkAccess)">
            <summary>
            Gets the object that is at the given <paramref name="path"/>.
            </summary>
            <param name="path">The path of the object.</param>
            <param name="linkAccess">The link access properties.</param>
            <returns>The requested object.</returns>
        </member>
        <member name="M:PureHDF.VOL.Native.NativeGroup.Get(PureHDF.VOL.Native.NativeObjectReference1)">
            <summary>
            Gets the object that is at the given <paramref name="reference"/>.
            </summary>
            <param name="reference">The reference of the object.</param>
            <returns>The requested object.</returns>
        </member>
        <member name="M:PureHDF.VOL.Native.NativeGroup.Get(PureHDF.VOL.Native.NativeObjectReference1,PureHDF.VOL.Native.H5LinkAccess)">
            <summary>
            Gets the object that is at the given <paramref name="reference"/>.
            </summary>
            <param name="reference">The reference of the object.</param>
            <param name="linkAccess">The link access properties.</param>
            <returns>The requested object.</returns>
        </member>
        <member name="M:PureHDF.VOL.Native.NativeGroup.Children">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.VOL.Native.NativeGroup.ChildrenAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.VOL.Native.NativeGroup.Children(PureHDF.VOL.Native.H5LinkAccess)">
            <summary>
            Gets an enumerable of the available children using the optionally specified <paramref name="linkAccess"/>.
            </summary>
            <param name="linkAccess">The link access properties.</param>
            <returns>An enumerable of the available children.</returns>
        </member>
        <member name="T:PureHDF.VOL.Native.NativeGroupExtensions">
            <summary>
            Defines extensions methods for the <see cref="T:PureHDF.VOL.Native.NativeGroup" /> type.
            </summary>
        </member>
        <member name="M:PureHDF.VOL.Native.NativeGroupExtensions.Get``1(PureHDF.VOL.Native.NativeGroup,System.String,PureHDF.VOL.Native.H5LinkAccess)">
            <summary>
            Gets the object that is at the given <paramref name="path"/>.
            </summary>
            <typeparam name="T">The return type of the object.</typeparam>
            <param name="group">The group to operate on.</param>
            <param name="path">The path of the object.</param>
            <param name="linkAccess">The link access properties.</param>
            <returns>The requested object.</returns>
        </member>
        <member name="M:PureHDF.VOL.Native.NativeGroupExtensions.Get``1(PureHDF.VOL.Native.NativeGroup,PureHDF.VOL.Native.NativeObjectReference1,PureHDF.VOL.Native.H5LinkAccess)">
            <summary>
            Gets the object that is at the given <paramref name="reference"/>.
            </summary>
            <typeparam name="T">The return type of the object.</typeparam>
            <param name="group">The group to operate on.</param>
            <param name="reference">The reference of the object.</param>
            <param name="linkAccess">The link access properties.</param>
            <returns>The requested object.</returns>
        </member>
        <member name="M:PureHDF.VOL.Native.NativeGroupExtensions.Get``1(PureHDF.VOL.Native.NativeGroup,PureHDF.VOL.Native.NativeObjectReference1)">
            <summary>
            Gets the object that is at the given <paramref name="reference"/>.
            </summary>
            <typeparam name="T">The return type of the object.</typeparam>
            <param name="group">The group to operate on.</param>
            <param name="reference">The reference of the object.</param>
            <returns>The requested object.</returns>
        </member>
        <member name="M:PureHDF.VOL.Native.NativeGroupExtensions.Group(PureHDF.VOL.Native.NativeGroup,System.String,PureHDF.VOL.Native.H5LinkAccess)">
            <summary>
            Gets the group that is at the given <paramref name="path"/>.
            </summary>
            <param name="group">The group to operate on.</param>
            <param name="path">The path of the object.</param>
            <param name="linkAccess">The link access properties.</param>
            <returns>The requested group.</returns>
        </member>
        <member name="M:PureHDF.VOL.Native.NativeGroupExtensions.Dataset(PureHDF.VOL.Native.NativeGroup,System.String,PureHDF.VOL.Native.H5LinkAccess)">
            <summary>
            Gets the dataset that is at the given <paramref name="path"/>.
            </summary>
            <param name="group">The group to operate on.</param>
            <param name="path">The path of the object.</param>
            <param name="linkAccess">The link access properties.</param>
            <returns>The requested dataset.</returns>
        </member>
        <member name="M:PureHDF.VOL.Native.NativeGroupExtensions.CommitedDatatype(PureHDF.VOL.Native.NativeGroup,System.String,PureHDF.VOL.Native.H5LinkAccess)">
            <summary>
            Gets the commited data type that is at the given <paramref name="path"/>.
            </summary>
            <param name="group">The group to operate on.</param>
            <param name="path">The path of the object.</param>
            <param name="linkAccess">The link access properties.</param>
            <returns>The requested commited data type.</returns>
        </member>
        <member name="T:PureHDF.VOL.Native.NativeObject">
            <inheritdoc />
        </member>
        <member name="P:PureHDF.VOL.Native.NativeObject.Name">
            <inheritdoc />
        </member>
        <member name="T:PureHDF.VOL.Native.NativeObjectReference1">
            <summary>
            An HDF5 object reference.
            </summary>
        </member>
        <member name="T:PureHDF.VOL.Native.NativeRegionReference1">
            <summary>
            An HDF5 region reference.
            </summary>
        </member>
        <member name="T:PureHDF.VOL.Native.SimpleChunkCache">
            <summary>
            A simple chunk cache.
            </summary>
            <summary>
            A simple chunk cache.
            </summary>
        </member>
        <member name="M:PureHDF.VOL.Native.SimpleChunkCache.#ctor(System.Int32,System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:PureHDF.VOL.Native.SimpleChunkCache"/> class.
            </summary>
            <param name="chunkSlotCount">The number of chunks that can be hold in the cache at the same time.</param>
            <param name="byteCount">The maximum size of the chunk cache in bytes.</param>
        </member>
        <member name="P:PureHDF.VOL.Native.SimpleChunkCache.ChunkSlotCount">
            <summary>
            Gets the number of chunks that can be hold in the cache at the same time.
            </summary>
        </member>
        <member name="P:PureHDF.VOL.Native.SimpleChunkCache.ConsumedSlots">
            <summary>
            Gets the number of chunk slots that have already been consumed.
            </summary>
        </member>
        <member name="P:PureHDF.VOL.Native.SimpleChunkCache.ByteCount">
            <summary>
            Gets the maximum size of the chunk cache in bytes.
            </summary>
        </member>
        <member name="P:PureHDF.VOL.Native.SimpleChunkCache.ConsumedBytes">
            <summary>
            Gets the number of consumed bytes of the chunk cache.
            </summary>
        </member>
        <member name="M:PureHDF.VOL.Native.SimpleChunkCache.GetChunk(System.UInt64[],System.Func{System.Memory{System.Byte}})">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.VOL.Native.SimpleChunkCache.GetChunk(System.UInt64[],System.Func{System.Memory{System.Byte}},System.Action{System.UInt64[],System.Memory{System.Byte}})">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.VOL.Native.SimpleChunkCache.Flush(System.Action{System.UInt64[],System.Memory{System.Byte}})">
            <inheritdoc />
        </member>
        <member name="T:PureHDF.VOL.Native.H5DatasetCreation">
            <summary>
            A structure which controls how the dataset is created. Reference: <seealso href="https://docs.hdfgroup.org/hdf5/v1_10/group___d_c_p_l.html">hdfgroup.org</seealso>
            </summary>
            <param name="ChunkCache">The chunk cache used for writing. If <see langword="null"/>, the value of the <see cref="P:PureHDF.VOL.Native.ChunkCache.DefaultWritingChunkCacheFactory"/> property is used instead.</param>
            <param name="Filters">A list of filters and their options to be applied to a chunk being written to the stream. If <see langword="null"/>, the value of the <see cref="P:PureHDF.H5WriteOptions.Filters"/> property is used instead.</param>
        </member>
        <member name="M:PureHDF.VOL.Native.H5DatasetCreation.#ctor(PureHDF.VOL.Native.IWritingChunkCache,System.Collections.Generic.List{PureHDF.Filters.H5Filter})">
            <summary>
            A structure which controls how the dataset is created. Reference: <seealso href="https://docs.hdfgroup.org/hdf5/v1_10/group___d_c_p_l.html">hdfgroup.org</seealso>
            </summary>
            <param name="ChunkCache">The chunk cache used for writing. If <see langword="null"/>, the value of the <see cref="P:PureHDF.VOL.Native.ChunkCache.DefaultWritingChunkCacheFactory"/> property is used instead.</param>
            <param name="Filters">A list of filters and their options to be applied to a chunk being written to the stream. If <see langword="null"/>, the value of the <see cref="P:PureHDF.H5WriteOptions.Filters"/> property is used instead.</param>
        </member>
        <member name="P:PureHDF.VOL.Native.H5DatasetCreation.ChunkCache">
            <summary>The chunk cache used for writing. If <see langword="null"/>, the value of the <see cref="P:PureHDF.VOL.Native.ChunkCache.DefaultWritingChunkCacheFactory"/> property is used instead.</summary>
        </member>
        <member name="P:PureHDF.VOL.Native.H5DatasetCreation.Filters">
            <summary>A list of filters and their options to be applied to a chunk being written to the stream. If <see langword="null"/>, the value of the <see cref="P:PureHDF.H5WriteOptions.Filters"/> property is used instead.</summary>
        </member>
        <member name="T:PureHDF.VOL.Native.IWritingChunkCache">
            <summary>
            Caches chunks during write operations.
            </summary>
        </member>
        <member name="M:PureHDF.VOL.Native.IWritingChunkCache.GetChunk(System.UInt64[],System.Func{System.Memory{System.Byte}},System.Action{System.UInt64[],System.Memory{System.Byte}})">
            <summary>
            Tries to get the chunk at the given position.
            </summary>
            <param name="indices">The chunk position.</param>
            <param name="chunkAllocator">The chunk allocator is used whenever the chunk is not already cached.</param>
            <param name="chunkWriter">The chunk writer is used whenever the chunk is flushed from the cache.</param>
        </member>
        <member name="M:PureHDF.VOL.Native.IWritingChunkCache.Flush(System.Action{System.UInt64[],System.Memory{System.Byte}})">
            <summary>
            Flushes the chunk.
            </summary>
            <param name="chunkWriter">The chunk writer used for chunks being flushed from the cache.</param>
        </member>
        <member name="T:PureHDF.H5NativeWriter">
            <summary>
            A writer for HDF5 files.
            </summary>
        </member>
        <member name="M:PureHDF.H5NativeWriter.Write``1(PureHDF.H5Dataset{``0},``0,PureHDF.Selections.Selection,PureHDF.Selections.Selection)">
            <summary>
            Write data to the specified dataset.
            </summary>
            <typeparam name="T">The data type.</typeparam>
            <param name="dataset">The dataset to write data to.</param>
            <param name="data">The data to write.</param>
            <param name="memorySelection">The memory selection.</param>
            <param name="fileSelection">The file selection.</param>
        </member>
        <member name="P:PureHDF.H5NativeWriter.File">
            <summary>
            The associated <see cref="T:PureHDF.H5File"/> instance.
            </summary>
        </member>
        <member name="M:PureHDF.H5NativeWriter.Dispose(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:PureHDF.H5NativeWriter.Dispose">
            <inheritdoc />
        </member>
        <member name="T:System.Index">
            <summary>Represent a type can be used to index a collection either from the start or the end.</summary>
            <remarks>
            Index is used by the C# compiler to support the new index syntax
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 } ;
            int lastElement = someArray[^1]; // lastElement = 5
            </code>
            </remarks>
        </member>
        <member name="M:System.Index.#ctor(System.Int32,System.Boolean)">
            <summary>Construct an Index using a value and indicating if the index is from the start or from the end.</summary>
            <param name="value">The index value. it has to be zero or positive number.</param>
            <param name="fromEnd">Indicating if the index is from the start or from the end.</param>
            <remarks>
            If the Index constructed from the end, index value 1 means pointing at the last element and index value 0 means pointing at beyond last element.
            </remarks>
        </member>
        <member name="P:System.Index.Start">
            <summary>Create an Index pointing at first element.</summary>
        </member>
        <member name="P:System.Index.End">
            <summary>Create an Index pointing at beyond last element.</summary>
        </member>
        <member name="M:System.Index.FromStart(System.Int32)">
            <summary>Create an Index from the start at the position indicated by the value.</summary>
            <param name="value">The index value from the start.</param>
        </member>
        <member name="M:System.Index.FromEnd(System.Int32)">
            <summary>Create an Index from the end at the position indicated by the value.</summary>
            <param name="value">The index value from the end.</param>
        </member>
        <member name="P:System.Index.Value">
            <summary>Returns the index value.</summary>
        </member>
        <member name="P:System.Index.IsFromEnd">
            <summary>Indicates whether the index is from the start or the end.</summary>
        </member>
        <member name="M:System.Index.GetOffset(System.Int32)">
            <summary>Calculate the offset from the start using the giving collection length.</summary>
            <param name="length">The length of the collection that the Index will be used with. length has to be a positive value</param>
            <remarks>
            For performance reason, we don't validate the input length parameter and the returned offset value against negative values.
            we don't validate either the returned offset is greater than the input length.
            It is expected Index will be used with collections which always have non negative length/count. If the returned offset is negative and
            then used to index a collection will get out of range exception which will be same affect as the validation.
            </remarks>
        </member>
        <member name="M:System.Index.Equals(System.Object)">
            <summary>Indicates whether the current Index object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.Equals(System.Index)">
            <summary>Indicates whether the current Index object is equal to another Index object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Index.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Index.op_Implicit(System.Int32)~System.Index">
            <summary>Converts integer number to an Index.</summary>
        </member>
        <member name="M:System.Index.ToString">
            <summary>Converts the value of the current Index object to its equivalent string representation.</summary>
        </member>
        <member name="T:System.Range">
            <summary>Represent a range has start and end indexes.</summary>
            <remarks>
            Range is used by the C# compiler to support the range syntax.
            <code>
            int[] someArray = new int[5] { 1, 2, 3, 4, 5 };
            int[] subArray1 = someArray[0..2]; // { 1, 2 }
            int[] subArray2 = someArray[1..^0]; // { 2, 3, 4, 5 }
            </code>
            </remarks>
        </member>
        <member name="P:System.Range.Start">
            <summary>Represent the inclusive start index of the Range.</summary>
        </member>
        <member name="P:System.Range.End">
            <summary>Represent the exclusive end index of the Range.</summary>
        </member>
        <member name="M:System.Range.#ctor(System.Index,System.Index)">
            <summary>Construct a Range object using the start and end indexes.</summary>
            <param name="start">Represent the inclusive start index of the range.</param>
            <param name="end">Represent the exclusive end index of the range.</param>
        </member>
        <member name="M:System.Range.Equals(System.Object)">
            <summary>Indicates whether the current Range object is equal to another object of the same type.</summary>
            <param name="value">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.Equals(System.Range)">
            <summary>Indicates whether the current Range object is equal to another Range object.</summary>
            <param name="other">An object to compare with this object</param>
        </member>
        <member name="M:System.Range.GetHashCode">
            <summary>Returns the hash code for this instance.</summary>
        </member>
        <member name="M:System.Range.ToString">
            <summary>Converts the value of the current Range object to its equivalent string representation.</summary>
        </member>
        <member name="M:System.Range.StartAt(System.Index)">
            <summary>Create a Range object starting from start index to the end of the collection.</summary>
        </member>
        <member name="M:System.Range.EndAt(System.Index)">
            <summary>Create a Range object starting from first element in the collection to the end Index.</summary>
        </member>
        <member name="P:System.Range.All">
            <summary>Create a Range object starting from first element to the end.</summary>
        </member>
        <member name="M:System.Range.GetOffsetAndLength(System.Int32)">
            <summary>Calculate the start offset and length of range object using a collection length.</summary>
            <param name="length">The length of the collection that the range will be used with. length has to be a positive value.</param>
            <remarks>
            For performance reason, we don't validate the input length parameter against negative values.
            It is expected Range will be used with collections which always have non negative length/count.
            We validate the range is inside the length scope though.
            </remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.RuntimeHelpers.GetSubArray``1(``0[],System.Range)">
            <summary>
            Slices the specified array using the specified range.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute">
            <summary>
            An attribute that allows parameters to receive the expression of other parameters.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute"/> class.
            </summary>
            <param name="parameterName">The condition parameter value.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CallerArgumentExpressionAttribute.ParameterName">
            <summary>
            Gets the parameter name the expression is retrieved from.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute">
            <summary>
            Indicates that compiler support for a particular feature is required for the location where this attribute is applied.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.#ctor(System.String)">
            <summary>
            Creates a new instance of the <see cref="T:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute"/> type.
            </summary>
            <param name="featureName">The name of the feature to indicate.</param>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName">
            <summary>
            The name of the compiler feature.
            </summary>
        </member>
        <member name="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.IsOptional">
            <summary>
            If true, the compiler can choose to allow access to the location where this attribute is applied if it does not understand <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/>.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RefStructs">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the ref structs C# feature.
            </summary>
        </member>
        <member name="F:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.RequiredMembers">
            <summary>
            The <see cref="P:System.Runtime.CompilerServices.CompilerFeatureRequiredAttribute.FeatureName"/> used for the required members C# feature.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute">
            <summary>
            Indicates which arguments to a method involving an interpolated string handler should be passed to that handler.
            </summary>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="argument">The name of the argument that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="M:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.#ctor(System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute"/> class.
            </summary>
            <param name="arguments">The names of the arguments that should be passed to the handler.</param>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="P:System.Runtime.CompilerServices.InterpolatedStringHandlerArgumentAttribute.Arguments">
            <summary>
            Gets the names of the arguments that should be passed to the handler.
            </summary>
            <remarks><see langword="null"/> may be used as the name of the receiver in an instance method.</remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.InterpolatedStringHandlerAttribute">
            <summary>
            Indicates the attributed type is to be used as an interpolated string handler.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.IsExternalInit">
            <summary>
            Reserved to be used by the compiler for tracking metadata.
            This class should not be used by developers in source code.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.ModuleInitializerAttribute">
             <summary>
             Used to indicate to the compiler that a method should be called
             in its containing module's initializer.
             </summary>
             <remarks>
             When one or more valid methods
             with this attribute are found in a compilation, the compiler will
             emit a module initializer which calls each of the attributed methods.
            
             Certain requirements are imposed on any method targeted with this attribute:
             - The method must be `static`.
             - The method must be an ordinary member method, as opposed to a property accessor, constructor, local function, etc.
             - The method must be parameterless.
             - The method must return `void`.
             - The method must not be generic or be contained in a generic type.
             - The method's effective accessibility must be `internal` or `public`.
            
             The specification for module initializers in the .NET runtime can be found here:
             https://github.com/dotnet/runtime/blob/main/docs/design/specs/Ecma-335-Augments.md#module-initializer
             </remarks>
        </member>
        <member name="T:System.Runtime.CompilerServices.RequiredMemberAttribute">
            <summary>
            Specifies that a type has required members or that a member is required.
            </summary>
        </member>
        <member name="T:System.Runtime.CompilerServices.SkipLocalsInitAttribute">
            <summary>
            Used to indicate to the compiler that the <c>.locals init</c> flag should not be set in method headers.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class.
            </summary>
        </member>
        <member name="M:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute"/> class with the specified message.
            </summary>
            <param name="message">An optional message associated with this attribute instance.</param>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Message">
            <summary>
            Returns the optional message associated with this attribute instance.
            </summary>
        </member>
        <member name="P:System.Runtime.Versioning.RequiresPreviewFeaturesAttribute.Url">
            <summary>
            Returns the optional URL associated with this attribute instance.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.AllowNullAttribute">
            <summary>
            Specifies that null is allowed as an input even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DisallowNullAttribute">
            <summary>
            Specifies that null is disallowed as an input even if the corresponding type allows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnAttribute">
            <summary>
            Applied to a method that will never return under any circumstance.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute">
            <summary>
            Specifies that the method will not return if the associated Boolean parameter is passed the specified value.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified parameter value.
            </summary>
            <param name="parameterValue">
            The condition parameter value. Code after the method will be considered unreachable
            by diagnostics if the argument to the associated parameter matches this value.
            </param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.DoesNotReturnIfAttribute.ParameterValue">
            <summary>
            Gets the condition parameter value.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullAttribute">
            <summary>
            Specifies that an output may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue"/>, the parameter may be null even if the corresponding type disallows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter may be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MaybeNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property members have not-null values.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with a field or property member.
            </summary>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.#ctor(System.String[])">
            <summary>
            Initializes the attribute with the list of field and property members.
            </summary>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute">
            <summary>
            Specifies that the method or property will ensure that the listed field and property
            members have not-null values when returning with the specified return value condition.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String)">
            <summary>
            Initializes the attribute with the specified return value condition and a field or property member.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="member">The field or property member that is promised to be not-null.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.#ctor(System.Boolean,System.String[])">
            <summary>
            Initializes the attribute with the specified return value condition and list of field and property members.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
            <param name="members">The list of field and property members that are promised to be not-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.ReturnValue">
            <summary>
            Gets the return value condition.
            </summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.MemberNotNullWhenAttribute.Members">
            <summary>
            Gets field or property member names.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullAttribute">
            <summary>
            Specifies that an output will not be null even if the corresponding type allows it.
            Specifies that an input argument was not null when the call returns.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute">
            <summary>
            Specifies that the output will be non-null if the named parameter is non-null.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.#ctor(System.String)">
            <summary>
            Initializes the attribute with the associated parameter name.
            </summary>
            <param name="parameterName">The associated parameter name. The output will be non-null if the argument to the parameter specified is non-null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullIfNotNullAttribute.ParameterName">
            <summary>
            Gets the associated parameter name.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute">
            <summary>
            Specifies that when a method returns <see cref="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue"/>, the parameter will not be null even if the corresponding type allows it.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.#ctor(System.Boolean)">
            <summary>
            Initializes the attribute with the specified return value condition.
            </summary>
            <param name="returnValue">The return value condition. If the method returns this value, the associated parameter will not be null.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.NotNullWhenAttribute.ReturnValue">
            <summary>Gets the return value condition.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.SetsRequiredMembersAttribute">
            <summary>
            Specifies that this constructor sets all required members for the current type,
            and callers do not need to set any required members themselves.
            </summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute">
            <summary>
            Specifies the syntax used in a string.
            </summary>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String)">
            <summary>
            Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.
            </summary>
            <param name="syntax">The syntax identifier.</param>
        </member>
        <member name="M:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.#ctor(System.String,System.Object[])">
            <summary>Initializes the <see cref="T:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute"/> with the identifier of the syntax used.</summary>
            <param name="syntax">The syntax identifier.</param>
            <param name="arguments">Optional arguments associated with the specific syntax employed.</param>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Syntax">
            <summary>Gets the identifier of the syntax used.</summary>
        </member>
        <member name="P:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Arguments">
            <summary>Optional arguments associated with the specific syntax employed.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.CompositeFormat">
            <summary>The syntax identifier for strings containing composite formats for string formatting.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateOnlyFormat">
            <summary>The syntax identifier for strings containing date format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.DateTimeFormat">
            <summary>The syntax identifier for strings containing date and time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.EnumFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Enum"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.GuidFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.Guid"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Json">
            <summary>The syntax identifier for strings containing JavaScript Object Notation (JSON).</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.NumericFormat">
            <summary>The syntax identifier for strings containing numeric format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Regex">
            <summary>The syntax identifier for strings containing regular expressions.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeOnlyFormat">
            <summary>The syntax identifier for strings containing time format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.TimeSpanFormat">
            <summary>The syntax identifier for strings containing <see cref="T:System.TimeSpan"/> format specifiers.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Uri">
            <summary>The syntax identifier for strings containing URIs.</summary>
        </member>
        <member name="F:System.Diagnostics.CodeAnalysis.StringSyntaxAttribute.Xml">
            <summary>The syntax identifier for strings containing XML.</summary>
        </member>
        <member name="T:System.Diagnostics.CodeAnalysis.UnscopedRefAttribute">
            <summary>
            Used to indicate a byref escapes and is not scoped.
            </summary>
            <remarks>
            <para>
            There are several cases where the C# compiler treats a <see langword="ref"/> as implicitly
            <see langword="scoped"/> - where the compiler does not allow the <see langword="ref"/> to escape the method.
            </para>
            <para>
            For example:
            <list type="number">
                <item><see langword="this"/> for <see langword="struct"/> instance methods.</item>
                <item><see langword="ref"/> parameters that refer to <see langword="ref"/> <see langword="struct"/> types.</item>
                <item><see langword="out"/> parameters.</item>
            </list>
            </para>
            <para>
            This attribute is used in those instances where the <see langword="ref"/> should be allowed to escape.
            </para>
            <para>
            Applying this attribute, in any form, has impact on consumers of the applicable API. It is necessary for
            API authors to understand the lifetime implications of applying this attribute and how it may impact their users.
            </para>
            </remarks>
        </member>
    </members>
</doc>
